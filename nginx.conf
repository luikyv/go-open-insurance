worker_processes auto;

events {
  worker_connections 1024;
}

http {

    access_log  /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;

    # Default server.
    server {
        listen 443 ssl;
        server_name mockin.local;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        location /auth {
            # Make sure the client certificate is not sent to the non mTLS endpoints.
            proxy_set_header X-Client-Cert "";

            # Use dynamic backend selection.
            set $backend "mockin";
            proxy_pass http://$backend:80;

            proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
            error_page 502 503 504 = @fallback;
        }

        location @fallback {
            proxy_pass http://host.docker.internal:80;
        }
    }

    # MTLS server.
    server {
        listen 443 ssl;
        server_name matls-mockin.local;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        ssl_client_certificate /etc/nginx/ssl/client_ca.crt;
        ssl_verify_client optional;

        location / {
            if ($ssl_client_verify != "SUCCESS") {
                add_header Content-Type text/plain;
                return 403 'invalid client certificate';
            }

            proxy_set_header X-Client-Cert $ssl_client_escaped_cert;

            # Use dynamic backend selection.
            set $backend "mockin";
            proxy_pass http://$backend:80;

            proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
            error_page 502 503 504 = @fallback;
        }

        location @fallback {
            proxy_pass http://host.docker.internal:80;
        }
    }
}
