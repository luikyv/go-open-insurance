//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AreaCode.
const (
	AreaCodeN11 AreaCode = "11"
	AreaCodeN12 AreaCode = "12"
	AreaCodeN13 AreaCode = "13"
	AreaCodeN14 AreaCode = "14"
	AreaCodeN15 AreaCode = "15"
	AreaCodeN16 AreaCode = "16"
	AreaCodeN17 AreaCode = "17"
	AreaCodeN18 AreaCode = "18"
	AreaCodeN19 AreaCode = "19"
	AreaCodeN21 AreaCode = "21"
	AreaCodeN22 AreaCode = "22"
	AreaCodeN24 AreaCode = "24"
	AreaCodeN27 AreaCode = "27"
	AreaCodeN28 AreaCode = "28"
	AreaCodeN31 AreaCode = "31"
	AreaCodeN32 AreaCode = "32"
	AreaCodeN33 AreaCode = "33"
	AreaCodeN34 AreaCode = "34"
	AreaCodeN35 AreaCode = "35"
	AreaCodeN37 AreaCode = "37"
	AreaCodeN38 AreaCode = "38"
	AreaCodeN41 AreaCode = "41"
	AreaCodeN42 AreaCode = "42"
	AreaCodeN43 AreaCode = "43"
	AreaCodeN44 AreaCode = "44"
	AreaCodeN45 AreaCode = "45"
	AreaCodeN46 AreaCode = "46"
	AreaCodeN47 AreaCode = "47"
	AreaCodeN48 AreaCode = "48"
	AreaCodeN49 AreaCode = "49"
	AreaCodeN51 AreaCode = "51"
	AreaCodeN53 AreaCode = "53"
	AreaCodeN54 AreaCode = "54"
	AreaCodeN55 AreaCode = "55"
	AreaCodeN61 AreaCode = "61"
	AreaCodeN62 AreaCode = "62"
	AreaCodeN63 AreaCode = "63"
	AreaCodeN64 AreaCode = "64"
	AreaCodeN65 AreaCode = "65"
	AreaCodeN66 AreaCode = "66"
	AreaCodeN67 AreaCode = "67"
	AreaCodeN68 AreaCode = "68"
	AreaCodeN69 AreaCode = "69"
	AreaCodeN71 AreaCode = "71"
	AreaCodeN73 AreaCode = "73"
	AreaCodeN74 AreaCode = "74"
	AreaCodeN75 AreaCode = "75"
	AreaCodeN77 AreaCode = "77"
	AreaCodeN79 AreaCode = "79"
	AreaCodeN81 AreaCode = "81"
	AreaCodeN82 AreaCode = "82"
	AreaCodeN83 AreaCode = "83"
	AreaCodeN84 AreaCode = "84"
	AreaCodeN85 AreaCode = "85"
	AreaCodeN86 AreaCode = "86"
	AreaCodeN87 AreaCode = "87"
	AreaCodeN88 AreaCode = "88"
	AreaCodeN89 AreaCode = "89"
	AreaCodeN91 AreaCode = "91"
	AreaCodeN92 AreaCode = "92"
	AreaCodeN93 AreaCode = "93"
	AreaCodeN94 AreaCode = "94"
	AreaCodeN95 AreaCode = "95"
	AreaCodeN96 AreaCode = "96"
	AreaCodeN97 AreaCode = "97"
	AreaCodeN98 AreaCode = "98"
	AreaCodeN99 AreaCode = "99"
	AreaCodeNA  AreaCode = "NA"
)

// Defines values for CapitalizationTitleEventType.
const (
	CapitalizationTitleEventTypeRESGATE CapitalizationTitleEventType = "RESGATE"
	CapitalizationTitleEventTypeSORTEIO CapitalizationTitleEventType = "SORTEIO"
)

// Defines values for CapitalizationTitleSeriesModality.
const (
	CapitalizationTitleSeriesModalityCOMPRAPROGRAMADA     CapitalizationTitleSeriesModality = "COMPRA_PROGRAMADA"
	CapitalizationTitleSeriesModalityFILANTROPIAPREMIAVEL CapitalizationTitleSeriesModality = "FILANTROPIA_PREMIAVEL"
	CapitalizationTitleSeriesModalityINSTRUMENTOGARANTIA  CapitalizationTitleSeriesModality = "INSTRUMENTO_GARANTIA"
	CapitalizationTitleSeriesModalityPOPULAR              CapitalizationTitleSeriesModality = "POPULAR"
	CapitalizationTitleSeriesModalityTRADICIONAL          CapitalizationTitleSeriesModality = "TRADICIONAL"
)

// Defines values for CapitalizationTypeEventRedemptionType.
const (
	CapitalizationTypeEventRedemptionTypeANTECIPADOPARCIAL CapitalizationTypeEventRedemptionType = "ANTECIPADO_PARCIAL"
	CapitalizationTypeEventRedemptionTypeANTECIPADOTOTAL   CapitalizationTypeEventRedemptionType = "ANTECIPADO_TOTAL"
	CapitalizationTypeEventRedemptionTypeFINALVIGENCIA     CapitalizationTypeEventRedemptionType = "FINAL_VIGENCIA"
)

// Defines values for CivilStatusCode.
const (
	CivilStatusCodeCASADO                CivilStatusCode = "CASADO"
	CivilStatusCodeDIVORCIADO            CivilStatusCode = "DIVORCIADO"
	CivilStatusCodeOUTROS                CivilStatusCode = "OUTROS"
	CivilStatusCodeSEPARADOJUDICIALMENTE CivilStatusCode = "SEPARADO_JUDICIALMENTE"
	CivilStatusCodeSOLTEIRO              CivilStatusCode = "SOLTEIRO"
	CivilStatusCodeUNIAOESTAVEL          CivilStatusCode = "UNIAO_ESTAVEL"
	CivilStatusCodeVIUVO                 CivilStatusCode = "VIUVO"
)

// Defines values for ConsentDataV2ClaimNotificationInformationDocumentType.
const (
	ConsentDataV2ClaimNotificationInformationDocumentTypeAPOLICEFROTAAUTOMOVEL      ConsentDataV2ClaimNotificationInformationDocumentType = "APOLICE_FROTA_AUTOMOVEL"
	ConsentDataV2ClaimNotificationInformationDocumentTypeAPOLICEINDIVIDUAL          ConsentDataV2ClaimNotificationInformationDocumentType = "APOLICE_INDIVIDUAL"
	ConsentDataV2ClaimNotificationInformationDocumentTypeAPOLICEINDIVIDUALAUTOMOVEL ConsentDataV2ClaimNotificationInformationDocumentType = "APOLICE_INDIVIDUAL_AUTOMOVEL"
	ConsentDataV2ClaimNotificationInformationDocumentTypeBILHETE                    ConsentDataV2ClaimNotificationInformationDocumentType = "BILHETE"
	ConsentDataV2ClaimNotificationInformationDocumentTypeCERTIFICADO                ConsentDataV2ClaimNotificationInformationDocumentType = "CERTIFICADO"
	ConsentDataV2ClaimNotificationInformationDocumentTypeCERTIFICADOAUTOMOVEL       ConsentDataV2ClaimNotificationInformationDocumentType = "CERTIFICADO_AUTOMOVEL"
)

// Defines values for ConsentPermission.
const (
	ConsentPermissionCAPITALIZATIONTITLEEVENTSREAD                             ConsentPermission = "CAPITALIZATION_TITLE_EVENTS_READ"
	ConsentPermissionCAPITALIZATIONTITLEPLANINFOREAD                           ConsentPermission = "CAPITALIZATION_TITLE_PLANINFO_READ"
	ConsentPermissionCAPITALIZATIONTITLEREAD                                   ConsentPermission = "CAPITALIZATION_TITLE_READ"
	ConsentPermissionCAPITALIZATIONTITLESETTLEMENTSREAD                        ConsentPermission = "CAPITALIZATION_TITLE_SETTLEMENTS_READ"
	ConsentPermissionCAPITALIZATIONTITLEWITHDRAWALCREATE                       ConsentPermission = "CAPITALIZATION_TITLE_WITHDRAWAL_CREATE"
	ConsentPermissionCLAIMNOTIFICATIONREQUESTDAMAGECREATE                      ConsentPermission = "CLAIM_NOTIFICATION_REQUEST_DAMAGE_CREATE"
	ConsentPermissionCLAIMNOTIFICATIONREQUESTPERSONCREATE                      ConsentPermission = "CLAIM_NOTIFICATION_REQUEST_PERSON_CREATE"
	ConsentPermissionCONTRACTLIFEPENSIONLEADCREATE                             ConsentPermission = "CONTRACT_LIFE_PENSION_LEAD_CREATE"
	ConsentPermissionCONTRACTLIFEPENSIONLEADPORTABILITYCREATE                  ConsentPermission = "CONTRACT_LIFE_PENSION_LEAD_PORTABILITY_CREATE"
	ConsentPermissionCONTRACTLIFEPENSIONLEADPORTABILITYUPDATE                  ConsentPermission = "CONTRACT_LIFE_PENSION_LEAD_PORTABILITY_UPDATE"
	ConsentPermissionCONTRACTLIFEPENSIONLEADUPDATE                             ConsentPermission = "CONTRACT_LIFE_PENSION_LEAD_UPDATE"
	ConsentPermissionCONTRACTPENSIONPLANLEADCREATE                             ConsentPermission = "CONTRACT_PENSION_PLAN_LEAD_CREATE"
	ConsentPermissionCONTRACTPENSIONPLANLEADPORTABILITYCREATE                  ConsentPermission = "CONTRACT_PENSION_PLAN_LEAD_PORTABILITY_CREATE"
	ConsentPermissionCONTRACTPENSIONPLANLEADPORTABILITYUPDATE                  ConsentPermission = "CONTRACT_PENSION_PLAN_LEAD_PORTABILITY_UPDATE"
	ConsentPermissionCONTRACTPENSIONPLANLEADUPDATE                             ConsentPermission = "CONTRACT_PENSION_PLAN_LEAD_UPDATE"
	ConsentPermissionCUSTOMERSBUSINESSADDITIONALINFOREAD                       ConsentPermission = "CUSTOMERS_BUSINESS_ADDITIONALINFO_READ"
	ConsentPermissionCUSTOMERSBUSINESSIDENTIFICATIONSREAD                      ConsentPermission = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ConsentPermissionCUSTOMERSBUSINESSQUALIFICATIONREAD                        ConsentPermission = "CUSTOMERS_BUSINESS_QUALIFICATION_READ"
	ConsentPermissionCUSTOMERSPERSONALADDITIONALINFOREAD                       ConsentPermission = "CUSTOMERS_PERSONAL_ADDITIONALINFO_READ"
	ConsentPermissionCUSTOMERSPERSONALIDENTIFICATIONSREAD                      ConsentPermission = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ConsentPermissionCUSTOMERSPERSONALQUALIFICATIONREAD                        ConsentPermission = "CUSTOMERS_PERSONAL_QUALIFICATION_READ"
	ConsentPermissionDAMAGESANDPEOPLEACCEPTANCEANDBRANCHESABROADCLAIMREAD      ConsentPermission = "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLEACCEPTANCEANDBRANCHESABROADPOLICYINFOREAD ConsentPermission = "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLEACCEPTANCEANDBRANCHESABROADPREMIUMREAD    ConsentPermission = "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLEACCEPTANCEANDBRANCHESABROADREAD           ConsentPermission = "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD_READ"
	ConsentPermissionDAMAGESANDPEOPLEAUTOCLAIMREAD                             ConsentPermission = "DAMAGES_AND_PEOPLE_AUTO_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLEAUTOPOLICYINFOREAD                        ConsentPermission = "DAMAGES_AND_PEOPLE_AUTO_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLEAUTOPREMIUMREAD                           ConsentPermission = "DAMAGES_AND_PEOPLE_AUTO_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLEAUTOREAD                                  ConsentPermission = "DAMAGES_AND_PEOPLE_AUTO_READ"
	ConsentPermissionDAMAGESANDPEOPLEFINANCIALRISKSCLAIMREAD                   ConsentPermission = "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLEFINANCIALRISKSPOLICYINFOREAD              ConsentPermission = "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLEFINANCIALRISKSPREMIUMREAD                 ConsentPermission = "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLEFINANCIALRISKSREAD                        ConsentPermission = "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS_READ"
	ConsentPermissionDAMAGESANDPEOPLEHOUSINGCLAIMREAD                          ConsentPermission = "DAMAGES_AND_PEOPLE_HOUSING_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLEHOUSINGPOLICYINFOREAD                     ConsentPermission = "DAMAGES_AND_PEOPLE_HOUSING_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLEHOUSINGPREMIUMREAD                        ConsentPermission = "DAMAGES_AND_PEOPLE_HOUSING_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLEHOUSINGREAD                               ConsentPermission = "DAMAGES_AND_PEOPLE_HOUSING_READ"
	ConsentPermissionDAMAGESANDPEOPLEPATRIMONIALCLAIMREAD                      ConsentPermission = "DAMAGES_AND_PEOPLE_PATRIMONIAL_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLEPATRIMONIALPOLICYINFOREAD                 ConsentPermission = "DAMAGES_AND_PEOPLE_PATRIMONIAL_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLEPATRIMONIALPREMIUMREAD                    ConsentPermission = "DAMAGES_AND_PEOPLE_PATRIMONIAL_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLEPATRIMONIALREAD                           ConsentPermission = "DAMAGES_AND_PEOPLE_PATRIMONIAL_READ"
	ConsentPermissionDAMAGESANDPEOPLEPERSONCLAIMREAD                           ConsentPermission = "DAMAGES_AND_PEOPLE_PERSON_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLEPERSONPOLICYINFOREAD                      ConsentPermission = "DAMAGES_AND_PEOPLE_PERSON_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLEPERSONPREMIUMREAD                         ConsentPermission = "DAMAGES_AND_PEOPLE_PERSON_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLEPERSONREAD                                ConsentPermission = "DAMAGES_AND_PEOPLE_PERSON_READ"
	ConsentPermissionDAMAGESANDPEOPLERESPONSIBILITYCLAIMREAD                   ConsentPermission = "DAMAGES_AND_PEOPLE_RESPONSIBILITY_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLERESPONSIBILITYPOLICYINFOREAD              ConsentPermission = "DAMAGES_AND_PEOPLE_RESPONSIBILITY_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLERESPONSIBILITYPREMIUMREAD                 ConsentPermission = "DAMAGES_AND_PEOPLE_RESPONSIBILITY_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLERESPONSIBILITYREAD                        ConsentPermission = "DAMAGES_AND_PEOPLE_RESPONSIBILITY_READ"
	ConsentPermissionDAMAGESANDPEOPLERURALCLAIMREAD                            ConsentPermission = "DAMAGES_AND_PEOPLE_RURAL_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLERURALPOLICYINFOREAD                       ConsentPermission = "DAMAGES_AND_PEOPLE_RURAL_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLERURALPREMIUMREAD                          ConsentPermission = "DAMAGES_AND_PEOPLE_RURAL_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLERURALREAD                                 ConsentPermission = "DAMAGES_AND_PEOPLE_RURAL_READ"
	ConsentPermissionDAMAGESANDPEOPLETRANSPORTCLAIMREAD                        ConsentPermission = "DAMAGES_AND_PEOPLE_TRANSPORT_CLAIM_READ"
	ConsentPermissionDAMAGESANDPEOPLETRANSPORTPOLICYINFOREAD                   ConsentPermission = "DAMAGES_AND_PEOPLE_TRANSPORT_POLICYINFO_READ"
	ConsentPermissionDAMAGESANDPEOPLETRANSPORTPREMIUMREAD                      ConsentPermission = "DAMAGES_AND_PEOPLE_TRANSPORT_PREMIUM_READ"
	ConsentPermissionDAMAGESANDPEOPLETRANSPORTREAD                             ConsentPermission = "DAMAGES_AND_PEOPLE_TRANSPORT_READ"
	ConsentPermissionENDORSEMENTREQUESTCREATE                                  ConsentPermission = "ENDORSEMENT_REQUEST_CREATE"
	ConsentPermissionFINANCIALASSISTANCECONTRACTINFOREAD                       ConsentPermission = "FINANCIAL_ASSISTANCE_CONTRACTINFO_READ"
	ConsentPermissionFINANCIALASSISTANCEMOVEMENTSREAD                          ConsentPermission = "FINANCIAL_ASSISTANCE_MOVEMENTS_READ"
	ConsentPermissionFINANCIALASSISTANCEREAD                                   ConsentPermission = "FINANCIAL_ASSISTANCE_READ"
	ConsentPermissionLIFEPENSIONCLAIM                                          ConsentPermission = "LIFE_PENSION_CLAIM"
	ConsentPermissionLIFEPENSIONCONTRACTINFOREAD                               ConsentPermission = "LIFE_PENSION_CONTRACTINFO_READ"
	ConsentPermissionLIFEPENSIONMOVEMENTSREAD                                  ConsentPermission = "LIFE_PENSION_MOVEMENTS_READ"
	ConsentPermissionLIFEPENSIONPORTABILITIESREAD                              ConsentPermission = "LIFE_PENSION_PORTABILITIES_READ"
	ConsentPermissionLIFEPENSIONREAD                                           ConsentPermission = "LIFE_PENSION_READ"
	ConsentPermissionLIFEPENSIONWITHDRAWALSREAD                                ConsentPermission = "LIFE_PENSION_WITHDRAWALS_READ"
	ConsentPermissionPENSIONPLANCLAIM                                          ConsentPermission = "PENSION_PLAN_CLAIM"
	ConsentPermissionPENSIONPLANCONTRACTINFOREAD                               ConsentPermission = "PENSION_PLAN_CONTRACTINFO_READ"
	ConsentPermissionPENSIONPLANMOVEMENTSREAD                                  ConsentPermission = "PENSION_PLAN_MOVEMENTS_READ"
	ConsentPermissionPENSIONPLANPORTABILITIESREAD                              ConsentPermission = "PENSION_PLAN_PORTABILITIES_READ"
	ConsentPermissionPENSIONPLANREAD                                           ConsentPermission = "PENSION_PLAN_READ"
	ConsentPermissionPENSIONPLANWITHDRAWALSREAD                                ConsentPermission = "PENSION_PLAN_WITHDRAWALS_READ"
	ConsentPermissionPENSIONWITHDRAWALCREATE                                   ConsentPermission = "PENSION_WITHDRAWAL_CREATE"
	ConsentPermissionQUOTEACCEPTANCEANDBRANCHESABROADLEADCREATE                ConsentPermission = "QUOTE_ACCEPTANCE_AND_BRANCHES_ABROAD_LEAD_CREATE"
	ConsentPermissionQUOTEACCEPTANCEANDBRANCHESABROADLEADUPDATE                ConsentPermission = "QUOTE_ACCEPTANCE_AND_BRANCHES_ABROAD_LEAD_UPDATE"
	ConsentPermissionQUOTEAUTOCREATE                                           ConsentPermission = "QUOTE_AUTO_CREATE"
	ConsentPermissionQUOTEAUTOLEADCREATE                                       ConsentPermission = "QUOTE_AUTO_LEAD_CREATE"
	ConsentPermissionQUOTEAUTOLEADUPDATE                                       ConsentPermission = "QUOTE_AUTO_LEAD_UPDATE"
	ConsentPermissionQUOTEAUTOREAD                                             ConsentPermission = "QUOTE_AUTO_READ"
	ConsentPermissionQUOTEAUTOUPDATE                                           ConsentPermission = "QUOTE_AUTO_UPDATE"
	ConsentPermissionQUOTECAPITALIZATIONTITLECREATE                            ConsentPermission = "QUOTE_CAPITALIZATION_TITLE_CREATE"
	ConsentPermissionQUOTECAPITALIZATIONTITLELEADCREATE                        ConsentPermission = "QUOTE_CAPITALIZATION_TITLE_LEAD_CREATE"
	ConsentPermissionQUOTECAPITALIZATIONTITLELEADUPDATE                        ConsentPermission = "QUOTE_CAPITALIZATION_TITLE_LEAD_UPDATE"
	ConsentPermissionQUOTECAPITALIZATIONTITLERAFFLECREATE                      ConsentPermission = "QUOTE_CAPITALIZATION_TITLE_RAFFLE_CREATE"
	ConsentPermissionQUOTECAPITALIZATIONTITLEREAD                              ConsentPermission = "QUOTE_CAPITALIZATION_TITLE_READ"
	ConsentPermissionQUOTECAPITALIZATIONTITLEUPDATE                            ConsentPermission = "QUOTE_CAPITALIZATION_TITLE_UPDATE"
	ConsentPermissionQUOTEFINANCIALRISKLEADCREATE                              ConsentPermission = "QUOTE_FINANCIAL_RISK_LEAD_CREATE"
	ConsentPermissionQUOTEFINANCIALRISKLEADUPDATE                              ConsentPermission = "QUOTE_FINANCIAL_RISK_LEAD_UPDATE"
	ConsentPermissionQUOTEHOUSINGLEADCREATE                                    ConsentPermission = "QUOTE_HOUSING_LEAD_CREATE"
	ConsentPermissionQUOTEHOUSINGLEADUPDATE                                    ConsentPermission = "QUOTE_HOUSING_LEAD_UPDATE"
	ConsentPermissionQUOTEPATRIMONIALBUSINESSCREATE                            ConsentPermission = "QUOTE_PATRIMONIAL_BUSINESS_CREATE"
	ConsentPermissionQUOTEPATRIMONIALBUSINESSREAD                              ConsentPermission = "QUOTE_PATRIMONIAL_BUSINESS_READ"
	ConsentPermissionQUOTEPATRIMONIALBUSINESSUPDATE                            ConsentPermission = "QUOTE_PATRIMONIAL_BUSINESS_UPDATE"
	ConsentPermissionQUOTEPATRIMONIALCONDOMINIUMCREATE                         ConsentPermission = "QUOTE_PATRIMONIAL_CONDOMINIUM_CREATE"
	ConsentPermissionQUOTEPATRIMONIALCONDOMINIUMREAD                           ConsentPermission = "QUOTE_PATRIMONIAL_CONDOMINIUM_READ"
	ConsentPermissionQUOTEPATRIMONIALCONDOMINIUMUPDATE                         ConsentPermission = "QUOTE_PATRIMONIAL_CONDOMINIUM_UPDATE"
	ConsentPermissionQUOTEPATRIMONIALDIVERSERISKSCREATE                        ConsentPermission = "QUOTE_PATRIMONIAL_DIVERSE_RISKS_CREATE"
	ConsentPermissionQUOTEPATRIMONIALDIVERSERISKSREAD                          ConsentPermission = "QUOTE_PATRIMONIAL_DIVERSE_RISKS_READ"
	ConsentPermissionQUOTEPATRIMONIALDIVERSERISKSUPDATE                        ConsentPermission = "QUOTE_PATRIMONIAL_DIVERSE_RISKS_UPDATE"
	ConsentPermissionQUOTEPATRIMONIALHOMECREATE                                ConsentPermission = "QUOTE_PATRIMONIAL_HOME_CREATE"
	ConsentPermissionQUOTEPATRIMONIALHOMEREAD                                  ConsentPermission = "QUOTE_PATRIMONIAL_HOME_READ"
	ConsentPermissionQUOTEPATRIMONIALHOMEUPDATE                                ConsentPermission = "QUOTE_PATRIMONIAL_HOME_UPDATE"
	ConsentPermissionQUOTEPATRIMONIALLEADCREATE                                ConsentPermission = "QUOTE_PATRIMONIAL_LEAD_CREATE"
	ConsentPermissionQUOTEPATRIMONIALLEADUPDATE                                ConsentPermission = "QUOTE_PATRIMONIAL_LEAD_UPDATE"
	ConsentPermissionQUOTEPERSONLEADCREATE                                     ConsentPermission = "QUOTE_PERSON_LEAD_CREATE"
	ConsentPermissionQUOTEPERSONLEADUPDATE                                     ConsentPermission = "QUOTE_PERSON_LEAD_UPDATE"
	ConsentPermissionQUOTEPERSONLIFECREATE                                     ConsentPermission = "QUOTE_PERSON_LIFE_CREATE"
	ConsentPermissionQUOTEPERSONLIFEREAD                                       ConsentPermission = "QUOTE_PERSON_LIFE_READ"
	ConsentPermissionQUOTEPERSONLIFEUPDATE                                     ConsentPermission = "QUOTE_PERSON_LIFE_UPDATE"
	ConsentPermissionQUOTEPERSONTRAVELCREATE                                   ConsentPermission = "QUOTE_PERSON_TRAVEL_CREATE"
	ConsentPermissionQUOTEPERSONTRAVELREAD                                     ConsentPermission = "QUOTE_PERSON_TRAVEL_READ"
	ConsentPermissionQUOTEPERSONTRAVELUPDATE                                   ConsentPermission = "QUOTE_PERSON_TRAVEL_UPDATE"
	ConsentPermissionQUOTERESPONSIBILITYLEADCREATE                             ConsentPermission = "QUOTE_RESPONSIBILITY_LEAD_CREATE"
	ConsentPermissionQUOTERESPONSIBILITYLEADUPDATE                             ConsentPermission = "QUOTE_RESPONSIBILITY_LEAD_UPDATE"
	ConsentPermissionQUOTERURALLEADCREATE                                      ConsentPermission = "QUOTE_RURAL_LEAD_CREATE"
	ConsentPermissionQUOTERURALLEADUPDATE                                      ConsentPermission = "QUOTE_RURAL_LEAD_UPDATE"
	ConsentPermissionQUOTETRANSPORTLEADCREATE                                  ConsentPermission = "QUOTE_TRANSPORT_LEAD_CREATE"
	ConsentPermissionQUOTETRANSPORTLEADUPDATE                                  ConsentPermission = "QUOTE_TRANSPORT_LEAD_UPDATE"
	ConsentPermissionRESOURCESREAD                                             ConsentPermission = "RESOURCES_READ"
)

// Defines values for ConsentRejectedBy.
const (
	ConsentRejectedByASPSP ConsentRejectedBy = "ASPSP"
	ConsentRejectedByTPP   ConsentRejectedBy = "TPP"
	ConsentRejectedByUSER  ConsentRejectedBy = "USER"
)

// Defines values for ConsentRejectedReasonCode.
const (
	ConsentRejectedReasonCodeCONSENTEXPIRED           ConsentRejectedReasonCode = "CONSENT_EXPIRED"
	ConsentRejectedReasonCodeCONSENTMAXDATEREACHED    ConsentRejectedReasonCode = "CONSENT_MAX_DATE_REACHED"
	ConsentRejectedReasonCodeCONSENTTECHNICALISSUE    ConsentRejectedReasonCode = "CONSENT_TECHNICAL_ISSUE"
	ConsentRejectedReasonCodeCUSTOMERMANUALLYREJECTED ConsentRejectedReasonCode = "CUSTOMER_MANUALLY_REJECTED"
	ConsentRejectedReasonCodeCUSTOMERMANUALLYREVOKED  ConsentRejectedReasonCode = "CUSTOMER_MANUALLY_REVOKED"
	ConsentRejectedReasonCodeINTERNALSECURITYREASON   ConsentRejectedReasonCode = "INTERNAL_SECURITY_REASON"
)

// Defines values for ConsentStatus.
const (
	ConsentStatusAUTHORISED            ConsentStatus = "AUTHORISED"
	ConsentStatusAWAITINGAUTHORISATION ConsentStatus = "AWAITING_AUTHORISATION"
	ConsentStatusCONSUMED              ConsentStatus = "CONSUMED"
	ConsentStatusREJECTED              ConsentStatus = "REJECTED"
)

// Defines values for CountrySubDivision.
const (
	CountrySubDivisionAC CountrySubDivision = "AC"
	CountrySubDivisionAL CountrySubDivision = "AL"
	CountrySubDivisionAM CountrySubDivision = "AM"
	CountrySubDivisionAP CountrySubDivision = "AP"
	CountrySubDivisionBA CountrySubDivision = "BA"
	CountrySubDivisionCE CountrySubDivision = "CE"
	CountrySubDivisionDF CountrySubDivision = "DF"
	CountrySubDivisionES CountrySubDivision = "ES"
	CountrySubDivisionGO CountrySubDivision = "GO"
	CountrySubDivisionMA CountrySubDivision = "MA"
	CountrySubDivisionMG CountrySubDivision = "MG"
	CountrySubDivisionMS CountrySubDivision = "MS"
	CountrySubDivisionMT CountrySubDivision = "MT"
	CountrySubDivisionPA CountrySubDivision = "PA"
	CountrySubDivisionPB CountrySubDivision = "PB"
	CountrySubDivisionPE CountrySubDivision = "PE"
	CountrySubDivisionPI CountrySubDivision = "PI"
	CountrySubDivisionPR CountrySubDivision = "PR"
	CountrySubDivisionRJ CountrySubDivision = "RJ"
	CountrySubDivisionRN CountrySubDivision = "RN"
	CountrySubDivisionRO CountrySubDivision = "RO"
	CountrySubDivisionRR CountrySubDivision = "RR"
	CountrySubDivisionRS CountrySubDivision = "RS"
	CountrySubDivisionSC CountrySubDivision = "SC"
	CountrySubDivisionSE CountrySubDivision = "SE"
	CountrySubDivisionSP CountrySubDivision = "SP"
	CountrySubDivisionTO CountrySubDivision = "TO"
)

// Defines values for CreateConsentRequestV2DataClaimNotificationInformationDocumentType.
const (
	CreateConsentRequestV2DataClaimNotificationInformationDocumentTypeAPOLICEFROTAAUTOMOVEL      CreateConsentRequestV2DataClaimNotificationInformationDocumentType = "APOLICE_FROTA_AUTOMOVEL"
	CreateConsentRequestV2DataClaimNotificationInformationDocumentTypeAPOLICEINDIVIDUAL          CreateConsentRequestV2DataClaimNotificationInformationDocumentType = "APOLICE_INDIVIDUAL"
	CreateConsentRequestV2DataClaimNotificationInformationDocumentTypeAPOLICEINDIVIDUALAUTOMOVEL CreateConsentRequestV2DataClaimNotificationInformationDocumentType = "APOLICE_INDIVIDUAL_AUTOMOVEL"
	CreateConsentRequestV2DataClaimNotificationInformationDocumentTypeBILHETE                    CreateConsentRequestV2DataClaimNotificationInformationDocumentType = "BILHETE"
	CreateConsentRequestV2DataClaimNotificationInformationDocumentTypeCERTIFICADO                CreateConsentRequestV2DataClaimNotificationInformationDocumentType = "CERTIFICADO"
	CreateConsentRequestV2DataClaimNotificationInformationDocumentTypeCERTIFICADOAUTOMOVEL       CreateConsentRequestV2DataClaimNotificationInformationDocumentType = "CERTIFICADO_AUTOMOVEL"
)

// Defines values for DocumentType.
const (
	DocumentTypeCNPJ       DocumentType = "CNPJ"
	DocumentTypeCPF        DocumentType = "CPF"
	DocumentTypeOUTROS     DocumentType = "OUTROS"
	DocumentTypePASSAPORTE DocumentType = "PASSAPORTE"
)

// Defines values for EndorsementType.
const (
	EndorsementTypeALTERACAO    EndorsementType = "ALTERACAO"
	EndorsementTypeCANCELAMENTO EndorsementType = "CANCELAMENTO"
	EndorsementTypeEXCLUSAO     EndorsementType = "EXCLUSAO"
	EndorsementTypeINCLUSAO     EndorsementType = "INCLUSAO"
)

// Defines values for FiliationType.
const (
	FiliationTypeMAE         FiliationType = "MAE"
	FiliationTypePAI         FiliationType = "PAI"
	FiliationTypeSEMFILIACAO FiliationType = "SEM_FILIACAO"
)

// Defines values for Frequency.
const (
	FrequencyMENSAL    Frequency = "MENSAL"
	FrequencyPERIODICO Frequency = "PERIODICO"
	FrequencyUNICO     Frequency = "UNICO"
)

// Defines values for IncomeFrequency.
const (
	IncomeFrequencyANUAL      IncomeFrequency = "ANUAL"
	IncomeFrequencyBIMESTRAL  IncomeFrequency = "BIMESTRAL"
	IncomeFrequencyDIARIA     IncomeFrequency = "DIARIA"
	IncomeFrequencyMENSAL     IncomeFrequency = "MENSAL"
	IncomeFrequencyQUINZENAL  IncomeFrequency = "QUINZENAL"
	IncomeFrequencySEMANAL    IncomeFrequency = "SEMANAL"
	IncomeFrequencySEMESTRAL  IncomeFrequency = "SEMESTRAL"
	IncomeFrequencyTRIMESTRAL IncomeFrequency = "TRIMESTRAL"
)

// Defines values for LifePensionPlanApplicability.
const (
	LifePensionPlanApplicabilityNAO         LifePensionPlanApplicability = "NAO"
	LifePensionPlanApplicabilityNAOSEAPLICA LifePensionPlanApplicability = "NAO_SE_APLICA"
	LifePensionPlanApplicabilitySIM         LifePensionPlanApplicability = "SIM"
)

// Defines values for OcupationCodeType.
const (
	OcupationCodeTypeCBO    OcupationCodeType = "CBO"
	OcupationCodeTypeOUTROS OcupationCodeType = "OUTROS"
	OcupationCodeTypeRFB    OcupationCodeType = "RFB"
)

// Defines values for PersonalDocumentType.
const (
	PersonalDocumentTypeCNH                 PersonalDocumentType = "CNH"
	PersonalDocumentTypeNIF                 PersonalDocumentType = "NIF"
	PersonalDocumentTypeOUTROS              PersonalDocumentType = "OUTROS"
	PersonalDocumentTypeRG                  PersonalDocumentType = "RG"
	PersonalDocumentTypeRNE                 PersonalDocumentType = "RNE"
	PersonalDocumentTypeSEMOUTROSDOCUMENTOS PersonalDocumentType = "SEM_OUTROS_DOCUMENTOS"
)

// Defines values for PoliticalExposure.
const (
	PoliticalExposureNAOEXPOSTO                                   PoliticalExposure = "NAO_EXPOSTO"
	PoliticalExposurePESSOAPOLITICAMENTEEXPOSTAPPE                PoliticalExposure = "PESSOA_POLITICAMENTE_EXPOSTA_PPE"
	PoliticalExposurePESSOAPROXIMAAPESSOAPOLITICAMENTEEXPOSTAPPEE PoliticalExposure = "PESSOA_PROXIMA_A_PESSOA_POLITICAMENTE_EXPOSTA_PPEE"
	PoliticalExposureSEMINFORMACAO                                PoliticalExposure = "SEM_INFORMACAO"
)

// Defines values for ProcuratorsNatureBusiness.
const (
	ProcuratorsNatureBusinessNAOSEAPLICA        ProcuratorsNatureBusiness = "NAO_SE_APLICA"
	ProcuratorsNatureBusinessPROCURADOR         ProcuratorsNatureBusiness = "PROCURADOR"
	ProcuratorsNatureBusinessREPRESENTANTELEGAL ProcuratorsNatureBusiness = "REPRESENTANTE_LEGAL"
)

// Defines values for ProcuratorsNaturePersonal.
const (
	ProcuratorsNaturePersonalNAOSEAPLICA        ProcuratorsNaturePersonal = "NAO_SE_APLICA"
	ProcuratorsNaturePersonalPROCURADOR         ProcuratorsNaturePersonal = "PROCURADOR"
	ProcuratorsNaturePersonalREPRESENTANTELEGAL ProcuratorsNaturePersonal = "REPRESENTANTE_LEGAL"
)

// Defines values for ProductServiceType.
const (
	ProductServiceTypeMICROSSEGUROS                   ProductServiceType = "MICROSSEGUROS"
	ProductServiceTypePLANOSDEPREVIDENCIACOMPLEMENTAR ProductServiceType = "PLANOS_DE_PREVIDENCIA_COMPLEMENTAR"
	ProductServiceTypeSEGUROSDEDANOS                  ProductServiceType = "SEGUROS_DE_DANOS"
	ProductServiceTypeSEGUROSDEPESSOAS                ProductServiceType = "SEGUROS_DE_PESSOAS"
	ProductServiceTypeTITULOSDECAPITALIZACAO          ProductServiceType = "TITULOS_DE_CAPITALIZACAO"
)

// Defines values for ReadjustmentIndex.
const (
	ReadjustmentIndexIGPM                                     ReadjustmentIndex = "IGPM"
	ReadjustmentIndexINCC                                     ReadjustmentIndex = "INCC"
	ReadjustmentIndexINDICEREMUNERACAOBASICADEPOSITOSPOUPANCA ReadjustmentIndex = "INDICE_REMUNERACAO_BASICA_DEPOSITOS_POUPANCA"
	ReadjustmentIndexINPC                                     ReadjustmentIndex = "INPC"
	ReadjustmentIndexIPCA                                     ReadjustmentIndex = "IPCA"
	ReadjustmentIndexOUTROS                                   ReadjustmentIndex = "OUTROS"
)

// Defines values for ResourceStatus.
const (
	ResourceStatusAVAILABLE              ResourceStatus = "AVAILABLE"
	ResourceStatusPENDINGAUTHORISATION   ResourceStatus = "PENDING_AUTHORISATION"
	ResourceStatusTEMPORARILYUNAVAILABLE ResourceStatus = "TEMPORARILY_UNAVAILABLE"
	ResourceStatusUNAVAILABLE            ResourceStatus = "UNAVAILABLE"
)

// Defines values for ResourceType.
const (
	ResourceTypeCAPITALIZATIONTITLES                        ResourceType = "CAPITALIZATION_TITLES"
	ResourceTypeCAPITALIZATIONTITLEWITHDRAWAL               ResourceType = "CAPITALIZATION_TITLE_WITHDRAWAL"
	ResourceTypeCLAIMNOTIFICATION                           ResourceType = "CLAIM_NOTIFICATION"
	ResourceTypeCONTRACTLIFEPENSION                         ResourceType = "CONTRACT_LIFE_PENSION"
	ResourceTypeCONTRACTPENSIONPLAN                         ResourceType = "CONTRACT_PENSION_PLAN"
	ResourceTypeCUSTOMERSBUSINESSADDITIONALINFO             ResourceType = "CUSTOMERS_BUSINESS_ADDITIONALINFO"
	ResourceTypeCUSTOMERSBUSINESSIDENTIFICATIONS            ResourceType = "CUSTOMERS_BUSINESS_IDENTIFICATIONS"
	ResourceTypeCUSTOMERSBUSINESSQUALIFICATION              ResourceType = "CUSTOMERS_BUSINESS_QUALIFICATION"
	ResourceTypeCUSTOMERSPERSONALADDITIONALINFO             ResourceType = "CUSTOMERS_PERSONAL_ADDITIONALINFO"
	ResourceTypeCUSTOMERSPERSONALIDENTIFICATIONS            ResourceType = "CUSTOMERS_PERSONAL_IDENTIFICATIONS"
	ResourceTypeCUSTOMERSPERSONALQUALIFICATION              ResourceType = "CUSTOMERS_PERSONAL_QUALIFICATION"
	ResourceTypeDAMAGESANDPEOPLEACCEPTANCEANDBRANCHESABROAD ResourceType = "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD"
	ResourceTypeDAMAGESANDPEOPLEAUTO                        ResourceType = "DAMAGES_AND_PEOPLE_AUTO"
	ResourceTypeDAMAGESANDPEOPLEFINANCIALRISKS              ResourceType = "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS"
	ResourceTypeDAMAGESANDPEOPLEHOUSING                     ResourceType = "DAMAGES_AND_PEOPLE_HOUSING"
	ResourceTypeDAMAGESANDPEOPLEPATRIMONIAL                 ResourceType = "DAMAGES_AND_PEOPLE_PATRIMONIAL"
	ResourceTypeDAMAGESANDPEOPLEPERSON                      ResourceType = "DAMAGES_AND_PEOPLE_PERSON"
	ResourceTypeDAMAGESANDPEOPLERESPONSIBILITY              ResourceType = "DAMAGES_AND_PEOPLE_RESPONSIBILITY"
	ResourceTypeDAMAGESANDPEOPLERURAL                       ResourceType = "DAMAGES_AND_PEOPLE_RURAL"
	ResourceTypeDAMAGESANDPEOPLETRANSPORT                   ResourceType = "DAMAGES_AND_PEOPLE_TRANSPORT"
	ResourceTypeENDORSEMENT                                 ResourceType = "ENDORSEMENT"
	ResourceTypeFINANCIALASSISTANCE                         ResourceType = "FINANCIAL_ASSISTANCE"
	ResourceTypeLIFEPENSION                                 ResourceType = "LIFE_PENSION"
	ResourceTypePENSIONPLAN                                 ResourceType = "PENSION_PLAN"
	ResourceTypePENSIONWITHDRAWAL                           ResourceType = "PENSION_WITHDRAWAL"
	ResourceTypeQUOTEACCEPTANCEANDBRANCHESABROAD            ResourceType = "QUOTE_ACCEPTANCE_AND_BRANCHES_ABROAD"
	ResourceTypeQUOTEAUTO                                   ResourceType = "QUOTE_AUTO"
	ResourceTypeQUOTECAPITALIZATIONTITLE                    ResourceType = "QUOTE_CAPITALIZATION_TITLE"
	ResourceTypeQUOTEFINANCIALRISK                          ResourceType = "QUOTE_FINANCIAL_RISK"
	ResourceTypeQUOTEHOUSING                                ResourceType = "QUOTE_HOUSING"
	ResourceTypeQUOTEPATRIMONIAL                            ResourceType = "QUOTE_PATRIMONIAL"
	ResourceTypeQUOTEPERSON                                 ResourceType = "QUOTE_PERSON"
	ResourceTypeQUOTERESPONSIBILITY                         ResourceType = "QUOTE_RESPONSIBILITY"
	ResourceTypeQUOTERURAL                                  ResourceType = "QUOTE_RURAL"
	ResourceTypeQUOTETRANSPORT                              ResourceType = "QUOTE_TRANSPORT"
)

// Defines values for UpdateIndex.
const (
	UpdateIndexIGPM                                     UpdateIndex = "IGPM"
	UpdateIndexINCC                                     UpdateIndex = "INCC"
	UpdateIndexINDICEREMUNERACAOBASICADEPOSITOSPOUPANCA UpdateIndex = "INDICE_REMUNERACAO_BASICA_DEPOSITOS_POUPANCA"
	UpdateIndexINPC                                     UpdateIndex = "INPC"
	UpdateIndexIPCA                                     UpdateIndex = "IPCA"
	UpdateIndexOUTROS                                   UpdateIndex = "OUTROS"
)

// AmountDetails defines model for AmountDetails.
type AmountDetails struct {
	Amount float32 `json:"amount"`

	// Currency Moeda da Parcela, de acordo com ISO-4217.
	Currency string `json:"currency"`
}

// AreaCode defines model for AreaCode.
type AreaCode string

// BusinessEntity defines model for BusinessEntity.
type BusinessEntity struct {
	Document struct {
		Identification string `json:"identification"`
		Rel            string `json:"rel"`
	} `json:"document"`
}

// CapitalizationTitleBrand Marca reportada pelo participante do Open Insurance
type CapitalizationTitleBrand struct {
	Companies []CapitalizationTitleCompany `json:"companies"`

	// Name Nome da marca reportada pelo participante do Open Insurance
	Name string `json:"name"`
}

// CapitalizationTitleBroker defines model for CapitalizationTitleBroker.
type CapitalizationTitleBroker struct {
	// BrokerDescription Nome ou Razão Social do Corretor
	BrokerDescription string `json:"brokerDescription"`

	// SusepBrokerCode Código SUSEP do corretor.
	SusepBrokerCode string `json:"susepBrokerCode"`
}

// CapitalizationTitleCompany defines model for CapitalizationTitleCompany.
type CapitalizationTitleCompany struct {
	// CnpjNumber CNPJ da sociedade pertencente à marca
	CnpjNumber string `json:"cnpjNumber"`

	// CompanyName Nome da sociedade pertencente à marca
	CompanyName string                       `json:"companyName"`
	Products    []CapitalizationTitleProduct `json:"products"`
}

// CapitalizationTitleEvent defines model for CapitalizationTitleEvent.
type CapitalizationTitleEvent struct {
	Event *CapitalizationTitleEventInfo `json:"event,omitempty"`

	// EventType Tipo de Evento
	EventType *CapitalizationTitleEventType `json:"eventType,omitempty"`

	// TitleId Código identificador do título na sociedade.
	TitleId *string `json:"titleId,omitempty"`
}

// CapitalizationTitleEventInfo defines model for CapitalizationTitleEventInfo.
type CapitalizationTitleEventInfo struct {
	Raffle     *CapitalizationTitleEventRaffle     `json:"raffle,omitempty"`
	Redemption *CapitalizationTitleEventRedemption `json:"redemption,omitempty"`
}

// CapitalizationTitleEventRaffle defines model for CapitalizationTitleEventRaffle.
type CapitalizationTitleEventRaffle struct {
	// RaffleAmount Montante do capital sorteado (prêmio de sorteio bruto, livre de IOF, quando aplicável)
	RaffleAmount AmountDetails `json:"raffleAmount"`

	// RaffleDate Data de realização do sorteio
	RaffleDate openapi_types.Date `json:"raffleDate"`

	// RaffleSettlementDate Data da liquidação financeira do capital sorteado
	RaffleSettlementDate openapi_types.Date `json:"raffleSettlementDate"`
}

// CapitalizationTitleEventRedemption defines model for CapitalizationTitleEventRedemption.
type CapitalizationTitleEventRedemption struct {
	// RedemptionAmount Valor de resgate. (Valor bruto de resgate, livre de IOF, quando aplicável)
	RedemptionAmount AmountDetails `json:"redemptionAmount"`

	// RedemptionBonusAmount Valor do Bonus. (Valor bruto do bonus resgatado, livre de IOF, quando aplicável)
	RedemptionBonusAmount AmountDetails `json:"redemptionBonusAmount"`

	// RedemptionRequestDate Data de solicitação do resgate
	RedemptionRequestDate openapi_types.Date `json:"redemptionRequestDate"`

	// RedemptionSettlementDate Data da liquidação financeira do resgate
	RedemptionSettlementDate openapi_types.Date `json:"redemptionSettlementDate"`
	RedemptionType           AmountDetails      `json:"redemptionType"`

	// UnreturnedAmount Valor não restituido. (Valor bruto não restituido ao titular em caso de resgate antecipado)
	UnreturnedAmount *AmountDetails `json:"unreturnedAmount,omitempty"`
}

// CapitalizationTitleEventType Tipo de Evento
type CapitalizationTitleEventType string

// CapitalizationTitleEvents defines model for CapitalizationTitleEvents.
type CapitalizationTitleEvents = []CapitalizationTitleEvent

// CapitalizationTitleEventsResponseV1 defines model for CapitalizationTitleEventsResponseV1.
type CapitalizationTitleEventsResponseV1 struct {
	Data  CapitalizationTitleEvents `json:"data"`
	Links Links                     `json:"links"`
	Meta  Meta                      `json:"meta"`
}

// CapitalizationTitleHolder defines model for CapitalizationTitleHolder.
type CapitalizationTitleHolder struct {
	// HolderAddress Endereço do titular
	HolderAddress string `json:"holderAddress"`

	// HolderAddressAdditionalInfo Alguns logradouros ainda necessitam ser especificados por meio de complemento.
	HolderAddressAdditionalInfo *string `json:"holderAddressAdditionalInfo,omitempty"`

	// HolderCountryCode Código do pais de acordo com o código “alpha3” do ISO-3166.
	// País do titular
	HolderCountryCode string `json:"holderCountryCode"`

	// HolderCountrySubDivision Estado do titular
	HolderCountrySubDivision CountrySubDivision `json:"holderCountrySubDivision"`

	// HolderDocumentNumber Documento de Identificação do Titular
	HolderDocumentNumber string `json:"holderDocumentNumber"`

	// HolderDocumentType Tipo de Documento do Titular
	HolderDocumentType DocumentType `json:"holderDocumentType"`

	// HolderDocumentTypeOthers Tipo de Documento do Titular, caso seja selecionado OUTROS.
	HolderDocumentTypeOthers *string `json:"holderDocumentTypeOthers,omitempty"`

	// HolderName Nome ou Razão Social do Titular
	HolderName string `json:"holderName"`

	// HolderPhones Lista com telefones do Titular (quando houver)
	HolderPhones *[]RequestorPhone `json:"holderPhones,omitempty"`

	// HolderPostCode Código de Endereçamento Postal: Composto por um conjunto numérico de oito dígitos, o objetivo principal do CEP é orientar e acelerar o encaminhamento, o tratamento e a entrega de objetos postados nos Correios, por meio da sua atribuição a localidades, logradouros, unidades dos Correios, serviços, órgãos públicos, empresas e edifícios. p.ex. '01311000'.
	// Código Postal do titular, Obrigatório, se houver
	HolderPostCode string `json:"holderPostCode"`

	// HolderRaffle Titular do direito de sorteio?
	HolderRaffle bool `json:"holderRaffle"`

	// HolderRedemption Titular do direito de resgate?
	HolderRedemption bool `json:"holderRedemption"`

	// HolderTownName Localidade: O nome da localidade corresponde à designação da cidade ou município no qual o endereço está localizado.
	// Cidade do titular
	HolderTownName string `json:"holderTownName"`
}

// CapitalizationTitlePlanData defines model for CapitalizationTitlePlanData.
type CapitalizationTitlePlanData struct {
	// Brand Marca reportada pelo participante do Open Insurance
	Brand CapitalizationTitleBrand `json:"brand"`
}

// CapitalizationTitlePlanInfo defines model for CapitalizationTitlePlanInfo.
type CapitalizationTitlePlanInfo struct {
	// Series Dados Gerais da Série
	Series []CapitalizationTitleSeries `json:"series"`
}

// CapitalizationTitlePlanInfoResponseV1 defines model for CapitalizationTitlePlanInfoResponseV1.
type CapitalizationTitlePlanInfoResponseV1 struct {
	Data  CapitalizationTitlePlanInfo `json:"data"`
	Links Links                       `json:"links"`
	Meta  Meta                        `json:"meta"`
}

// CapitalizationTitlePlansResponseV1 defines model for CapitalizationTitlePlansResponseV1.
type CapitalizationTitlePlansResponseV1 struct {
	Data  []CapitalizationTitlePlanData `json:"data"`
	Links Links                         `json:"links"`
	Meta  Meta                          `json:"meta"`
}

// CapitalizationTitleProduct defines model for CapitalizationTitleProduct.
type CapitalizationTitleProduct struct {
	// PlanId planId - Identificador do contrato do plano
	PlanId string `json:"planId"`

	// ProductName Nome comercial do produto associado ao plano
	ProductName string `json:"productName"`
}

// CapitalizationTitleSeries Dados Gerais da Série
type CapitalizationTitleSeries struct {
	// BonusClause Cláusula de bônus
	BonusClause bool `json:"bonusClause"`

	// Broker Dados do corretor (quando houver)
	Broker *[]CapitalizationTitleBroker `json:"broker,omitempty"`

	// CapitalizationQuota Percentual da contribuição destinado à constituição de capital referente ao direito de resgate
	CapitalizationQuota PercentageDetails `json:"capitalizationQuota"`

	// CommercialName Denominação comercial do produto de propriedade exclusiva da sociedade de capitalização. Condicional, caso selecionada as opções "Filantropia Premiável" ou "Popular" no campo "Modalidade".
	CommercialName *string `json:"commercialName,omitempty"`

	// Frequency Tipo de Contribuição - pagamento único, pagamento mensal ou periódico
	Frequency Frequency `json:"frequency"`

	// FrequencyDescription Descrição do Tipo de Contribuição (Quando o Tipo de Contribuição for 3. Pagamento Periódico)
	FrequencyDescription *string `json:"frequencyDescription,omitempty"`

	// GracePeriodForFullRedemption Intervalo de tempo mínimo entre contratação e resgate total do direito, em meses
	GracePeriodForFullRedemption int `json:"gracePeriodForFullRedemption"`

	// GracePeriodRedemption Intervalo de tempo mínimo entre contratação e resgate parcial do direito, em meses.
	GracePeriodRedemption *int `json:"gracePeriodRedemption,omitempty"`

	// InterestRate Taxa de juros efetiva real mensal utilizada para remuneração do título de capitalização.
	InterestRate PercentageDetails `json:"interestRate"`

	// Modality Modalidade
	Modality CapitalizationTitleSeriesModality `json:"modality"`

	// PlanId Identificação do plano
	PlanId *string `json:"planId,omitempty"`

	// RaffleQuota Percentual da contribuição destinado a custear os sorteios, se previstos no plano
	RaffleQuota PercentageDetails `json:"raffleQuota"`

	// ReadjustmentIndex Índice de reajuste das contribuições e do capital para vigências acima de doze meses
	ReadjustmentIndex ReadjustmentIndex `json:"readjustmentIndex"`

	// ReadjustmentIndexOthers Descreve o índice de reajuste utilizado quando outro que não previamente relacionado nos domínios do campo.
	ReadjustmentIndexOthers *string `json:"readjustmentIndexOthers,omitempty"`

	// SerieSize Quantidade máxima possível de títulos que pode ser emitida para uma mesma série
	SerieSize int `json:"serieSize"`

	// SeriesId Identificação da série
	SeriesId string `json:"seriesId"`

	// SusepProcessNumber Número do processo SUSEP.
	SusepProcessNumber string `json:"susepProcessNumber"`

	// Titles Dados Gerais do Título
	Titles []CapitalizationTitleTitle `json:"titles"`

	// UpdateIndex Descreve o índice de atualização das reservas.
	UpdateIndex UpdateIndex `json:"updateIndex"`

	// UpdateIndexOthers Descreve o índice de atualização utilizado quando outro que não previamente relacionado nos domínios do campo.
	UpdateIndexOthers *string `json:"updateIndexOthers,omitempty"`

	// UploadQuota Percentual da contribuição destinado aos custos de despesas com corretagem, colocação e administração do título de capitalização, emissão, divulgação, lucro da sociedade de capitalização e eventuais despesas relativas ao custeio da contemplação obrigatória e da distribuição de bônus
	UploadQuota PercentageDetails `json:"uploadQuota"`
}

// CapitalizationTitleSeriesModality Modalidade
type CapitalizationTitleSeriesModality string

// CapitalizationTitleSettlement defines model for CapitalizationTitleSettlement.
type CapitalizationTitleSettlement struct {
	// SettlementDueDate Data de Vencimento da Contribuicao
	SettlementDueDate openapi_types.Date `json:"settlementDueDate"`

	// SettlementFinancialAmount Valor da contribuicao
	SettlementFinancialAmount AmountDetails `json:"settlementFinancialAmount"`

	// SettlementId Identificador da Contribuicao
	SettlementId string `json:"settlementId"`

	// SettlementPaymentDate Data da Contribuicao
	SettlementPaymentDate openapi_types.Date `json:"settlementPaymentDate"`
}

// CapitalizationTitleSettlements defines model for CapitalizationTitleSettlements.
type CapitalizationTitleSettlements = []CapitalizationTitleSettlement

// CapitalizationTitleSettlementsResponseV1 defines model for CapitalizationTitleSettlementsResponseV1.
type CapitalizationTitleSettlementsResponseV1 struct {
	Data  CapitalizationTitleSettlements `json:"data"`
	Links Links                          `json:"links"`
	Meta  Meta                           `json:"meta"`
}

// CapitalizationTitleSubscriber defines model for CapitalizationTitleSubscriber.
type CapitalizationTitleSubscriber struct {
	// Holder Dados Gerais do Titular
	Holder *[]CapitalizationTitleHolder `json:"holder,omitempty"`

	// SubscriberAddress Endereço do subscritor
	SubscriberAddress string `json:"subscriberAddress"`

	// SubscriberAddressAdditionalInfo Alguns logradouros ainda necessitam ser especificados por meio de complemento.
	SubscriberAddressAdditionalInfo *string `json:"subscriberAddressAdditionalInfo,omitempty"`

	// SubscriberCountryCode Código do pais de acordo com o código “alpha3” do ISO-3166.
	// País do subscritor
	SubscriberCountryCode string `json:"subscriberCountryCode"`

	// SubscriberCountrySubDivision Estado do subscritor
	SubscriberCountrySubDivision CountrySubDivision `json:"subscriberCountrySubDivision"`

	// SubscriberDocumentNumber Documento de Identificação do Subscritor
	SubscriberDocumentNumber string `json:"subscriberDocumentNumber"`

	// SubscriberDocumentType Tipo de Documento do Titular
	SubscriberDocumentType DocumentType `json:"subscriberDocumentType"`

	// SubscriberDocumentTypeOthers Tipo de Documento do Subscritor, caso seja selecionado OUTROS.
	SubscriberDocumentTypeOthers *string `json:"subscriberDocumentTypeOthers,omitempty"`

	// SubscriberName Nome ou Razão Social do Subscritor
	SubscriberName string `json:"subscriberName"`

	// SubscriberPhones Lista com telefones do subscritor (quando houver)
	SubscriberPhones *[]RequestorPhone `json:"subscriberPhones,omitempty"`

	// SubscriberPostCode Código de Endereçamento Postal: Composto por um conjunto numérico de oito dígitos, o objetivo principal do CEP é orientar e acelerar o encaminhamento, o tratamento e a entrega de objetos postados nos Correios, por meio da sua atribuição a localidades, logradouros, unidades dos Correios, serviços, órgãos públicos, empresas e edifícios. p.ex. '01311000'.
	// Código Postal do subscritor, Obrigatório, se houver
	SubscriberPostCode string `json:"subscriberPostCode"`

	// SubscriberTownName Localidade: O nome da localidade corresponde à designação da cidade ou município no qual o endereço está localizado.
	// Cidade do subscritor
	SubscriberTownName string `json:"subscriberTownName"`
}

// CapitalizationTitleTechnicalProvisions (Esses valores poderão sofrer alterações no momento do resgate/pagamento,conforme regras do produto nas condições gerais)
type CapitalizationTitleTechnicalProvisions struct {
	// PdbAmount Valor da PDB (fim do mes) - Valor da Provisão para Distribuição de Bônus (PDB), no fim de cada mês. Caso não haja saldo informar nulo
	PdbAmount AmountDetails `json:"pdbAmount"`

	// PmcAmount Valor da PMC (fim do mes) - Valor da Provisão Matemática para Capitalização (PMC), no fim de cada mês. Caso não haja saldo informar nulo
	PmcAmount AmountDetails `json:"pmcAmount"`

	// PrAmount Valor da PR (fim do mes) - Valor da Provisão para Resgate (PR), no fim de cada mês. Caso não haja saldo informar nulo
	PrAmount AmountDetails `json:"prAmount"`

	// PspAmount Valor da PSP (fim do mes) - Valor da Provisão de Sorteios a Pagar (PSP), no fim de cada mês. Caso não haja saldo informar nulo
	PspAmount AmountDetails `json:"pspAmount"`
}

// CapitalizationTitleTitle defines model for CapitalizationTitleTitle.
type CapitalizationTitleTitle struct {
	// ContributionAmount Corresponde ao pagamento efetuado pelo subscritor à sociedade de capitalização para a aquisição do título de capitalização, podendo ser única, periódica ou mensal. Em todas as situações indicar para qual periodicidade de pagamento se aplicam os valores(pagamento mensal, pagamento único ou periódico).
	ContributionAmount AmountDetails `json:"contributionAmount"`

	// IssueTitleDate Data de Emissão do Título
	IssueTitleDate openapi_types.Date `json:"issueTitleDate"`

	// RafflePremiumAmount Valor do premio de sorteio
	RafflePremiumAmount AmountDetails `json:"rafflePremiumAmount"`

	// RegistrationForm Identificação da ﬁcha de cadastro ou contrato comercial
	RegistrationForm string `json:"registrationForm"`

	// Subscriber Dados Gerais do Título
	Subscriber []CapitalizationTitleSubscriber `json:"subscriber"`

	// TechnicalProvisions Informações de Provisões técnicas
	TechnicalProvisions []CapitalizationTitleTechnicalProvisions `json:"technicalProvisions"`

	// TermEndDate Data de fim de vigência do título de capitalização.
	TermEndDate openapi_types.Date `json:"termEndDate"`

	// TermStartDate Data de início de vigência do título de capitalização.
	TermStartDate openapi_types.Date `json:"termStartDate"`

	// TitleId Identificação do título de capitalização
	TitleId string `json:"titleId"`
}

// CapitalizationTypeEventRedemptionType Tipo de resgate
type CapitalizationTypeEventRedemptionType string

// CivilStatusCode defines model for CivilStatusCode.
type CivilStatusCode string

// CompanyInfo defines model for CompanyInfo.
type CompanyInfo struct {
	CnpjNumber string `json:"cnpjNumber"`
	Name       string `json:"name"`
}

// ConsentDataV2 defines model for ConsentDataV2.
type ConsentDataV2 struct {
	ClaimNotificationInformation *struct {
		// DocumentType Tipo de Documento Emitido.
		DocumentType          ConsentDataV2ClaimNotificationInformationDocumentType `json:"documentType"`
		GroupCertificateId    *string                                               `json:"groupCertificateId,omitempty"`
		OccurrenceDate        openapi_types.Date                                    `json:"occurrenceDate"`
		OccurrenceDescription string                                                `json:"occurrenceDescription"`
		OccurrenceTime        *string                                               `json:"occurrenceTime,omitempty"`
		PolicyNumber          string                                                `json:"policyNumber"`
	} `json:"claimNotificationInformation,omitempty"`
	ConsentId              string              `json:"consentId"`
	CreationDateTime       DateTime            `json:"creationDateTime"`
	EndorsementInformation *EndorsementInfo    `json:"endorsementInformation,omitempty"`
	ExpirationDateTime     DateTime            `json:"expirationDateTime"`
	Permissions            []ConsentPermission `json:"permissions"`
	Rejection              *ConsentRejection   `json:"rejection,omitempty"`
	Status                 ConsentStatus       `json:"status"`
	StatusUpdateDateTime   DateTime            `json:"statusUpdateDateTime"`
}

// ConsentDataV2ClaimNotificationInformationDocumentType Tipo de Documento Emitido.
type ConsentDataV2ClaimNotificationInformationDocumentType string

// ConsentPermission defines model for ConsentPermission.
type ConsentPermission string

// ConsentRejectedBy defines model for ConsentRejectedBy.
type ConsentRejectedBy string

// ConsentRejectedReason defines model for ConsentRejectedReason.
type ConsentRejectedReason struct {
	AdditionalInformation *string                   `json:"additionalInformation,omitempty"`
	Code                  ConsentRejectedReasonCode `json:"code"`
}

// ConsentRejectedReasonCode defines model for ConsentRejectedReasonCode.
type ConsentRejectedReasonCode string

// ConsentRejection defines model for ConsentRejection.
type ConsentRejection struct {
	Reason     ConsentRejectedReason `json:"reason"`
	RejectedBy ConsentRejectedBy     `json:"rejectedBy"`
}

// ConsentResponseV2 defines model for ConsentResponseV2.
type ConsentResponseV2 struct {
	Data  ConsentDataV2 `json:"data"`
	Links *Links        `json:"links,omitempty"`
	Meta  *Meta         `json:"meta,omitempty"`
}

// ConsentStatus defines model for ConsentStatus.
type ConsentStatus string

// CountrySubDivision Enumeração referente a cada sigla da unidade da federação que identifica o estado ou o distrito federal, no qual o endereço está localizado. p.ex. 'AC'. São consideradas apenas as siglas para os estados brasileiros
type CountrySubDivision string

// CreateConsentRequestV2 defines model for CreateConsentRequestV2.
type CreateConsentRequestV2 struct {
	Data struct {
		BusinessEntity               *BusinessEntity `json:"businessEntity,omitempty"`
		ClaimNotificationInformation *struct {
			DocumentType          CreateConsentRequestV2DataClaimNotificationInformationDocumentType `json:"documentType"`
			GroupCertificateId    *string                                                            `json:"groupCertificateId,omitempty"`
			OccurrenceDate        openapi_types.Date                                                 `json:"occurrenceDate"`
			OccurrenceDescription string                                                             `json:"occurrenceDescription"`
			OccurrenceTime        *string                                                            `json:"occurrenceTime,omitempty"`
			PolicyNumber          string                                                             `json:"policyNumber"`
		} `json:"claimNotificationInformation,omitempty"`
		EndorsementInformation *struct {
			EndorsementType    EndorsementType `json:"endorsementType"`
			PolicyNumber       string          `json:"policyNumber"`
			RequestDescription string          `json:"requestDescription"`
		} `json:"endorsementInformation,omitempty"`
		ExpirationDateTime DateTime            `json:"expirationDateTime"`
		LoggedUser         LoggedUser          `json:"loggedUser"`
		Permissions        []ConsentPermission `json:"permissions"`
	} `json:"data"`
}

// CreateConsentRequestV2DataClaimNotificationInformationDocumentType defines model for CreateConsentRequestV2.Data.ClaimNotificationInformation.DocumentType.
type CreateConsentRequestV2DataClaimNotificationInformationDocumentType string

// CreateEndorsementRequestV1 defines model for CreateEndorsementRequestV1.
type CreateEndorsementRequestV1 struct {
	Data struct {
		CustomData      *EndorsementCustomData `json:"customData,omitempty"`
		EndorsementType EndorsementType        `json:"endorsementType"`

		// PolicyNumber Número da apólice, conforme regulamentação vigente
		PolicyNumber string `json:"policyNumber"`

		// RequestDate Data de Solicitação do Endosso
		RequestDate openapi_types.Date `json:"requestDate"`

		// RequestDescription Descrição adicional do endosso
		RequestDescription string `json:"requestDescription"`
	} `json:"data"`
}

// CustomInfoData Estrutura para identificação e transmissão de dados customizáveis.
type CustomInfoData struct {
	// FieldId Um identificador único usado para identificar o valor transmitido.
	FieldId string `json:"fieldId"`

	// Value Valor do campo identificado acima, esse campo pode ser implementado como qualquer tipo de dado (objeto, texto, número, booleano, etc.)
	Value interface{} `json:"value"`
}

// CustomerEmail defines model for CustomerEmail.
type CustomerEmail struct {
	Email *string `json:"email,omitempty"`
}

// CustomerPhone defines model for CustomerPhone.
type CustomerPhone struct {
	AreaCode           *AreaCode `json:"areaCode,omitempty"`
	CountryCallingCode *string   `json:"countryCallingCode,omitempty"`
	Number             *string   `json:"number,omitempty"`
	PhoneExtension     *string   `json:"phoneExtension,omitempty"`
}

// DocumentType Tipo de Documento do Titular
type DocumentType string

// EndorsementCustomData defines model for EndorsementCustomData.
type EndorsementCustomData struct {
	Beneficiaries             *[]CustomInfoData `json:"beneficiaries,omitempty"`
	BusinessComplimentaryInfo *[]CustomInfoData `json:"businessComplimentaryInfo,omitempty"`
	BusinessIdentification    *[]CustomInfoData `json:"businessIdentification,omitempty"`
	BusinessQualification     *[]CustomInfoData `json:"businessQualification,omitempty"`
	Coverages                 *[]CustomInfoData `json:"coverages,omitempty"`
	CustomerComplimentaryInfo *[]CustomInfoData `json:"customerComplimentaryInfo,omitempty"`
	CustomerIdentification    *[]CustomInfoData `json:"customerIdentification,omitempty"`
	CustomerQualification     *[]CustomInfoData `json:"customerQualification,omitempty"`
	GeneralQuoteInfo          *[]CustomInfoData `json:"generalQuoteInfo,omitempty"`
	InsuredObjects            *[]CustomInfoData `json:"insuredObjects,omitempty"`
	RiskLocationInfo          *[]CustomInfoData `json:"riskLocationInfo,omitempty"`
}

// EndorsementData defines model for EndorsementData.
type EndorsementData struct {
	CustomData      *EndorsementCustomData `json:"customData,omitempty"`
	EndorsementType EndorsementType        `json:"endorsementType"`

	// PolicyNumber Número da apólice, conforme regulamentação vigente
	PolicyNumber string `json:"policyNumber"`

	// ProtocolDateTime Data e hora do protocolamento do endosso, conforme especificação RFC-3339, formato UTC.
	ProtocolDateTime DateTime `json:"protocolDateTime"`

	// ProtocolNumber Identificador da Solicitação do Endosso, conforme protocolo interno da seguradora avisada.
	ProtocolNumber string `json:"protocolNumber"`

	// RequestDate Data de Solicitação do Endosso
	RequestDate openapi_types.Date `json:"requestDate"`

	// RequestDescription Descrição adicional do endosso
	RequestDescription string `json:"requestDescription"`
}

// EndorsementInfo defines model for EndorsementInfo.
type EndorsementInfo struct {
	EndorsementType    EndorsementType `json:"endorsementType"`
	PolicyNumber       string          `json:"policyNumber"`
	RequestDescription string          `json:"requestDescription"`
}

// EndorsementResponseV1 defines model for EndorsementResponseV1.
type EndorsementResponseV1 struct {
	Data  EndorsementData `json:"data"`
	Links RedirectLinks   `json:"links"`
}

// EndorsementType defines model for EndorsementType.
type EndorsementType string

// Error defines model for Error.
type Error struct {
	Code            string   `json:"code"`
	Detail          string   `json:"detail"`
	RequestDateTime DateTime `json:"requestDateTime"`
	Title           string   `json:"title"`
}

// Errors defines model for Errors.
type Errors = []Error

// Filiation defines model for Filiation.
type Filiation struct {
	// CivilName Nome civil completo da pessoa relativa à filiação.
	// (Direito fundamental da pessoa, o nome civil é aquele atribuído à pessoa natural desde o registro de seu nascimento,
	// com o qual será identificada por toda a sua vida, bem como após a sua morte).
	CivilName *string `json:"civilName,omitempty"`

	// Type Tipo de filiação.
	Type *FiliationType `json:"type,omitempty"`
}

// FiliationType Tipo de filiação.
type FiliationType string

// Frequency Tipo de Contribuição - pagamento único, pagamento mensal ou periódico
type Frequency string

// IdentificationDetails Informações referente ao cônjuge.
type IdentificationDetails struct {
	// CivilName Nome civil completo da pessoa natural (Direito fundamental da pessoa, o nome civil é aquele atribuído à pessoa natural desde o registro de seu nascimento, com o qual será identificada por toda a sua vida, bem como após a sua morte)
	CivilName *string `json:"civilName,omitempty"`

	// CpfNumber Número completo do CPF. Atributo que corresponde às informações mínimas exigidas pela Regulamentação em vigor. O CPF é o Cadastro de Pessoa natural.  Ele é um documento feito pela Receita Federal e serve para identificar os contribuintes. O CPF é uma numeração com 11 dígitos, que só mudam por decisão judicial. O documento é emitido pela receita federal
	// Condicional a seleção de true em hasBrazilianNationality
	CpfNumber *string `json:"cpfNumber,omitempty"`
}

// IncomeFrequency Frequência da renda informada.
type IncomeFrequency string

// InformedPatrimony defines model for InformedPatrimony.
type InformedPatrimony struct {
	// Amount Valor do patrimônio
	Amount *string `json:"amount"`

	// Currency Moeda referente ao valor do patrimônio, segundo modelo ISO-4217.
	Currency *string `json:"currency,omitempty"`

	// Year Ano de referência do patrimônio, conforme especificação RFC-3339.
	Year *string `json:"year,omitempty"`
}

// InformedRevenue defines model for InformedRevenue.
type InformedRevenue struct {
	// Amount Valor do rendimento
	Amount *string `json:"amount"`

	// Currency Moeda referente ao valor da renda, segundo modelo ISO-4217.
	Currency *string `json:"currency,omitempty"`

	// Date Data de referência da renda, conforme especificação RFC-3339.
	Date *openapi_types.Date `json:"date,omitempty"`

	// IncomeFrequency Frequência da renda informada.
	IncomeFrequency *IncomeFrequency `json:"incomeFrequency,omitempty"`
}

// LifePensionPlanApplicability Condição de proponente qualificado, aplicável à contratação de planos de previdência e vida por sobrevivência
type LifePensionPlanApplicability string

// Links defines model for Links.
type Links struct {
	First *string `json:"first,omitempty"`
	Last  *string `json:"last,omitempty"`
	Next  *string `json:"next,omitempty"`
	Prev  *string `json:"prev,omitempty"`
	Self  string  `json:"self"`
}

// LoggedUser defines model for LoggedUser.
type LoggedUser struct {
	Document struct {
		Identification string `json:"identification"`
		Rel            string `json:"rel"`
	} `json:"document"`
}

// Meta defines model for Meta.
type Meta struct {
	TotalPages   int32 `json:"totalPages"`
	TotalRecords int32 `json:"totalRecords"`
}

// Ocupation Objeto agrupador de informações relativas ocupação da pessoa natural
type Ocupation struct {
	// Details Ocupação
	Details *string `json:"details,omitempty"`

	// OccupationCode Código da ocupação
	OccupationCode *string `json:"occupationCode,omitempty"`

	// OccupationCodeType Tipo de código da ocupação
	OccupationCodeType *OcupationCodeType `json:"occupationCodeType,omitempty"`

	// OccupationCodeTypeOthers Descricao do tipo de codigo da ocupacao quando for informada a opcao OUTROS
	OccupationCodeTypeOthers *string `json:"occupationCodeTypeOthers,omitempty"`
}

// OcupationCodeType Tipo de código da ocupação
type OcupationCodeType string

// OtherPersonalDocuments defines model for OtherPersonalDocuments.
type OtherPersonalDocuments struct {
	// Country País do(s) documento(s) estrangeiro(s) de identificação.
	Country *string `json:"country,omitempty"`

	// ExpirationDate Data de vigência do documento de registro - conforme especificação RFC-3339.
	ExpirationDate *openapi_types.Date `json:"expirationDate,omitempty"`

	// Number Numero/codigo do(s) documento(s) de identificacao. Obrigatorio desde que a participante possua a informacao
	Number *string `json:"number,omitempty"`

	// Type Tipo do(s) documento(s) estrangeiro(s) de identificação
	Type *string `json:"type,omitempty"`
}

// PercentageDetails defines model for PercentageDetails.
type PercentageDetails = float32

// PersonalComplimentaryInfoData Objeto que reúne as informações relativas ao relacionamento do cliente junto à Instituição. Considera-se relacionamento as informações que permitam conhecer desde quando a pessoa consultada é cliente da instituição, bem como um indicador dos produtos e serviços que ela consome atualmente e seus representantes
type PersonalComplimentaryInfoData struct {
	ProductsServices []ProductService `json:"productsServices"`

	// RelationshipBeginning Campo deve ser preenchido com a data da apólice/contrato vigente mais antiga (caso haja contrato vigente)
	RelationshipBeginning *openapi_types.Date `json:"relationshipBeginning,omitempty"`

	// StartDate Data mais antiga de inicio de relacionamento, considerando todos os contratos (vigentes e nao vigentes). Os contratos nao vigentes considerados devem contemplar, no minimo o periodo indicado na Tabela 22.
	StartDate openapi_types.Date `json:"startDate"`

	// UpdateDateTime Data e hora da atualização do bloco de Relacionamento, conforme especificação RFC-3339, formato UTC.
	UpdateDateTime DateTime `json:"updateDateTime"`
}

// PersonalComplimentaryInfoResponseV1 defines model for PersonalComplimentaryInfoResponseV1.
type PersonalComplimentaryInfoResponseV1 struct {
	Data  []PersonalComplimentaryInfoData `json:"data"`
	Links Links                           `json:"links"`
	Meta  Meta                            `json:"meta"`
}

// PersonalContact Conjunto de informações referentes às formas para contatar o cliente.
type PersonalContact struct {
	// Emails Lista e-mails de contato
	Emails *[]CustomerEmail `json:"emails,omitempty"`

	// Phones Lista com telefones de contato da pessoa natural
	Phones *[]CustomerPhone `json:"phones,omitempty"`

	// PostalAddresses Lista de endereços da pessoa natural
	PostalAddresses []PersonalPostalAddress `json:"postalAddresses"`
}

// PersonalDocumentType Tipo do(s) documento(s) de identificação.
type PersonalDocumentType string

// PersonalDocuments defines model for PersonalDocuments.
type PersonalDocuments = []struct {
	DocumentTypeOthers *string `json:"documentTypeOthers,omitempty"`

	// ExpirationDate Data de validade do(s) documento(s) de identificação - Se aplicável.
	ExpirationDate *openapi_types.Date `json:"expirationDate,omitempty"`

	// IssueLocation Local de emissão - Se aplicável.
	IssueLocation *string               `json:"issueLocation,omitempty"`
	Number        *string               `json:"number,omitempty"`
	Type          *PersonalDocumentType `json:"type,omitempty"`
}

// PersonalIdentificationData defines model for PersonalIdentificationData.
type PersonalIdentificationData struct {
	BirthDate             *openapi_types.Date `json:"birthDate,omitempty"`
	BrandName             string              `json:"brandName"`
	CivilName             string              `json:"civilName"`
	CivilStatusCode       *CivilStatusCode    `json:"civilStatusCode,omitempty"`
	CivilStatusCodeOthers *string             `json:"civilStatusCodeOthers,omitempty"`
	CompanyInfo           CompanyInfo         `json:"companyInfo"`

	// Contact Conjunto de informações referentes às formas para contatar o cliente.
	Contact   PersonalContact    `json:"contact"`
	CpfNumber string             `json:"cpfNumber"`
	Documents *PersonalDocuments `json:"documents,omitempty"`

	// Filiation Tipo de filiação.
	Filiation               *FiliationType `json:"filiation,omitempty"`
	HasBrazilianNationality *bool          `json:"hasBrazilianNationality"`

	// IdentificationDetails Informações referente ao cônjuge.
	IdentificationDetails  *IdentificationDetails  `json:"identificationDetails,omitempty"`
	OtherDocuments         *OtherPersonalDocuments `json:"otherDocuments,omitempty"`
	OtherNationalitiesInfo *string                 `json:"otherNationalitiesInfo,omitempty"`
	PersonalId             *string                 `json:"personalId,omitempty"`
	Sex                    *string                 `json:"sex,omitempty"`
	SocialName             *string                 `json:"socialName,omitempty"`
	UpdateDateTime         DateTime                `json:"updateDateTime"`
}

// PersonalIdentificationResponseV1 defines model for PersonalIdentificationResponseV1.
type PersonalIdentificationResponseV1 struct {
	Data  []PersonalIdentificationData `json:"data"`
	Links Links                        `json:"links"`
	Meta  Meta                         `json:"meta"`
}

// PersonalPostalAddress defines model for PersonalPostalAddress.
type PersonalPostalAddress struct {
	// AdditionalInfo Alguns logradouros ainda necessitam ser especificados por meio de complemento.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	Address        string  `json:"address"`

	// Country Código do pais de acordo com o código “alpha3” do ISO-3166.
	Country string `json:"country"`

	// CountrySubDivision Enumeração referente a cada sigla da unidade da federação que identifica o estado ou o distrito federal, no qual o endereço está localizado. p.ex. 'AC'. São consideradas apenas as siglas para os estados brasileiros
	CountrySubDivision CountrySubDivision `json:"countrySubDivision"`

	// DistrictName Bairro é uma comunidade ou região localizada em uma cidade ou município de acordo com as suas subdivisões geográficas.
	DistrictName *string `json:"districtName,omitempty"`

	// PostCode Código de Endereçamento Postal: Composto por um conjunto numérico de oito dígitos, o objetivo principal do CEP é orientar e acelerar o encaminhamento, o tratamento e a entrega de objetos postados nos Correios, por meio da sua atribuição a localidades, logradouros, unidades dos Correios, serviços, órgãos públicos, empresas e edifícios. p.ex. '01311000'.
	PostCode string `json:"postCode"`

	// TownName Localidade: O nome da localidade corresponde à designação da cidade ou município no qual o endereço está localizado.
	TownName string `json:"townName"`
}

// PersonalProcurator defines model for PersonalProcurator.
type PersonalProcurator struct {
	// CivilName (Caso Natureza dos poderes vigentes de representante for “Representante legal” ou “Procurador”) Nome ou razão social do representante
	CivilName *string `json:"civilName,omitempty"`

	// CpfNumber (Caso Natureza dos poderes vigentes de representante for “Representante legal” ou “Procurador”) CPF do representante
	CpfNumber *string `json:"cpfNumber,omitempty"`

	// Nature Natureza dos poderes vigentes de representante
	Nature ProcuratorsNaturePersonal `json:"nature"`

	// SocialName (Caso Natureza dos poderes vigentes de representante for “Representante legal” ou “Procurador”) Nome social do representante
	SocialName *string `json:"socialName,omitempty"`
}

// PersonalQualificationData defines model for PersonalQualificationData.
type PersonalQualificationData struct {
	InformedPatrimony *InformedPatrimony `json:"informedPatrimony,omitempty"`
	InformedRevenue   *InformedRevenue   `json:"informedRevenue,omitempty"`

	// LifePensionPlans Condição de proponente qualificado, aplicável à contratação de planos de previdência e vida por sobrevivência
	LifePensionPlans  LifePensionPlanApplicability `json:"lifePensionPlans"`
	Occupation        *[]Ocupation                 `json:"occupation,omitempty"`
	PepIdentification PoliticalExposure            `json:"pepIdentification"`
	UpdateDateTime    DateTime                     `json:"updateDateTime"`
}

// PersonalQualificationResponseV1 defines model for PersonalQualificationResponseV1.
type PersonalQualificationResponseV1 struct {
	Data  []PersonalQualificationData `json:"data"`
	Links Links                       `json:"links"`
	Meta  Meta                        `json:"meta"`
}

// PoliticalExposure defines model for PoliticalExposure.
type PoliticalExposure string

// ProcuratorsNatureBusiness Natureza dos poderes vigentes de representante
type ProcuratorsNatureBusiness string

// ProcuratorsNaturePersonal Natureza dos poderes vigentes de representante
type ProcuratorsNaturePersonal string

// ProductService Lista de todos os contratos vigentes e não vigentes.
type ProductService struct {
	// Contract Lista de todos os numeros dos contratos vigentes e nao vigentes. Os contratos nao vigentes considerados devem contemplar, no minimo o periodo indicado na Tabela 22.
	Contract string `json:"contract"`

	// InsuranceLineCode Indicar para cada contrato, caso aplicável, o código do ramo, conforme listagem de códigos definida em regulamentação específica sobre contabilização em ramos. Obs - Caso tipo de produto do contrato for “Seguros de Danos”
	InsuranceLineCode *string `json:"insuranceLineCode,omitempty"`

	// Procurators Lista dos representantes. De preenchimento obrigatório se houver representante.
	Procurators *[]PersonalProcurator `json:"procurators,omitempty"`

	// Type Tipos de produtos.
	Type ProductServiceType `json:"type"`
}

// ProductServiceType Tipos de produtos.
type ProductServiceType string

// ReadjustmentIndex Índice de reajuste das contribuições e do capital para vigências acima de doze meses
type ReadjustmentIndex string

// RedirectLinks defines model for RedirectLinks.
type RedirectLinks struct {
	// Redirect Campo destinado a disponibilização de links de acesso a outros materiais.
	Redirect string `json:"redirect"`
}

// RequestorPhone defines model for RequestorPhone.
type RequestorPhone struct {
	AreaCode *AreaCode `json:"areaCode,omitempty"`

	// CountryCallingCode Número de DDI (Discagem Direta Internacional) para telefone de acesso ao Cliente - se aplicável
	CountryCallingCode *string `json:"countryCallingCode,omitempty"`

	// Number Número de telefone do cliente
	Number *string `json:"number,omitempty"`
}

// ResourceData defines model for ResourceData.
type ResourceData struct {
	// ResourceId Identifica o recurso reportado pelo participante do Open Insurance, no caso de:
	// Produtos de Titulos de Capitalização: policyNumber ou certificateNumber
	// Produtos de Previdência: certificateNumber
	// Produtos de Danos e Pessoas (independente do ramo e torná-lo como obrigatório): policyNumber ou certificateNumber
	ResourceId string `json:"resourceId"`

	// Status - Tipo de status de recurso (vide Enum):
	// - Available: Disponível
	// - Unavailable: Indisponível
	// - Temporarily Unavailable: Temporariamente Indisponível
	// - Pending Authorisation: Pendente de Autorização
	Status ResourceStatus `json:"status"`

	// Type Tipo de recurso (vide Enum):
	// - CUSTOMERS_PERSONAL_IDENTIFICATIONS: Informações de identificação PF
	// - CUSTOMERS_PERSONAL_QUALIFICATION: Informações de qualificação PF
	// - CUSTOMERS_PERSONAL_ADDITIONALINFO: Informações complementares PF
	// - CUSTOMERS_BUSINESS_IDENTIFICATIONS: Informações de identificação PJ
	// - CUSTOMERS_BUSINESS_QUALIFICATION: Informações de qualificação PJ
	// - CUSTOMERS_BUSINESS_ADDITIONALINFO: Informações complementares PJ
	// - CAPITALIZATION_TITLES: Produtos de Titulos de Capitalização
	// - PENSION_PLAN: Produtos de Previdência Risco
	// - LIFE_PENSION: Produtos de Previdência Sobrevivência
	// - FINANCIAL_ASSISTANCE: Produtos de Assistência Financeira
	// - DAMAGES_AND_PEOPLE_PATRIMONIAL: Produtos de Patrimonial
	// - DAMAGES_AND_PEOPLE_RESPONSIBILITY: Produtos de Responsabilidade
	// - DAMAGES_AND_PEOPLE_TRANSPORT: Produtos de Transportes
	// - DAMAGES_AND_PEOPLE_FINANCIAL_RISKS: Produtos de Riscos Financeiros
	// - DAMAGES_AND_PEOPLE_RURAL: Produtos de Rural
	// - DAMAGES_AND_PEOPLE_AUTO: Produtos de Automóveis
	// - DAMAGES_AND_PEOPLE_HOUSING: Produtos de Habitacional
	// - DAMAGES_AND_PEOPLE_PERSON: Produtos de Pessoas (Repartição simples)
	// - DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD: Aceitação e Sucursal no exterior
	// - CLAIM_NOTIFICATION: Solicitação de Aviso de Sinistro
	// - ENDORSEMENT: Solicitação de Endosso
	// - QUOTE_PATRIMONIAL: Cotação do Seguro Patrimonial
	// - QUOTE_ACCEPTANCE_AND_BRANCHES_ABROAD: Cotação do Seguro Aceitação e Sucursal no exterior
	// - QUOTE_AUTO: Cotação do Seguro Automóvel
	// - QUOTE_FINANCIAL_RISK: Cotação do Seguro Riscos Financeiros
	// - QUOTE_HOUSING: Cotação do Seguro Habitacional
	// - QUOTE_RESPONSIBILITY: Cotação do Seguro Responsabilidade
	// - QUOTE_RURAL: Cotação do Seguro Rural
	// - QUOTE_TRANSPORT: Cotação do Seguro Transportes
	// - QUOTE_PERSON: Cotação do Seguro Pessoas
	// - QUOTE_CAPITALIZATION_TITLE: Cotação de Títulos de Capitalização
	// - CONTRACT_LIFE_PENSION: Contratação/Portabilidade de Previdência Sobrevivência
	// - CONTRACT_PENSION_PLAN: Contratação/Portabilidade de Previdência Risco
	// - PENSION_WITHDRAWAL: Resgate de Previdência
	// - CAPITALIZATION_TITLE_WITHDRAWAL: Resgate de Títulos de Capitalização
	Type ResourceType `json:"type"`
}

// ResourceStatus - Tipo de status de recurso (vide Enum):
// - Available: Disponível
// - Unavailable: Indisponível
// - Temporarily Unavailable: Temporariamente Indisponível
// - Pending Authorisation: Pendente de Autorização
type ResourceStatus string

// ResourceType Tipo de recurso (vide Enum):
// - CUSTOMERS_PERSONAL_IDENTIFICATIONS: Informações de identificação PF
// - CUSTOMERS_PERSONAL_QUALIFICATION: Informações de qualificação PF
// - CUSTOMERS_PERSONAL_ADDITIONALINFO: Informações complementares PF
// - CUSTOMERS_BUSINESS_IDENTIFICATIONS: Informações de identificação PJ
// - CUSTOMERS_BUSINESS_QUALIFICATION: Informações de qualificação PJ
// - CUSTOMERS_BUSINESS_ADDITIONALINFO: Informações complementares PJ
// - CAPITALIZATION_TITLES: Produtos de Titulos de Capitalização
// - PENSION_PLAN: Produtos de Previdência Risco
// - LIFE_PENSION: Produtos de Previdência Sobrevivência
// - FINANCIAL_ASSISTANCE: Produtos de Assistência Financeira
// - DAMAGES_AND_PEOPLE_PATRIMONIAL: Produtos de Patrimonial
// - DAMAGES_AND_PEOPLE_RESPONSIBILITY: Produtos de Responsabilidade
// - DAMAGES_AND_PEOPLE_TRANSPORT: Produtos de Transportes
// - DAMAGES_AND_PEOPLE_FINANCIAL_RISKS: Produtos de Riscos Financeiros
// - DAMAGES_AND_PEOPLE_RURAL: Produtos de Rural
// - DAMAGES_AND_PEOPLE_AUTO: Produtos de Automóveis
// - DAMAGES_AND_PEOPLE_HOUSING: Produtos de Habitacional
// - DAMAGES_AND_PEOPLE_PERSON: Produtos de Pessoas (Repartição simples)
// - DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD: Aceitação e Sucursal no exterior
// - CLAIM_NOTIFICATION: Solicitação de Aviso de Sinistro
// - ENDORSEMENT: Solicitação de Endosso
// - QUOTE_PATRIMONIAL: Cotação do Seguro Patrimonial
// - QUOTE_ACCEPTANCE_AND_BRANCHES_ABROAD: Cotação do Seguro Aceitação e Sucursal no exterior
// - QUOTE_AUTO: Cotação do Seguro Automóvel
// - QUOTE_FINANCIAL_RISK: Cotação do Seguro Riscos Financeiros
// - QUOTE_HOUSING: Cotação do Seguro Habitacional
// - QUOTE_RESPONSIBILITY: Cotação do Seguro Responsabilidade
// - QUOTE_RURAL: Cotação do Seguro Rural
// - QUOTE_TRANSPORT: Cotação do Seguro Transportes
// - QUOTE_PERSON: Cotação do Seguro Pessoas
// - QUOTE_CAPITALIZATION_TITLE: Cotação de Títulos de Capitalização
// - CONTRACT_LIFE_PENSION: Contratação/Portabilidade de Previdência Sobrevivência
// - CONTRACT_PENSION_PLAN: Contratação/Portabilidade de Previdência Risco
// - PENSION_WITHDRAWAL: Resgate de Previdência
// - CAPITALIZATION_TITLE_WITHDRAWAL: Resgate de Títulos de Capitalização
type ResourceType string

// ResourcesResponseV2 defines model for ResourcesResponseV2.
type ResourcesResponseV2 struct {
	// Data Lista de recursos e seus respectivos status.
	Data  []ResourceData `json:"data"`
	Links Links          `json:"links"`
	Meta  Meta           `json:"meta"`
}

// ResponseError defines model for ResponseError.
type ResponseError struct {
	Errors ResponseError_Errors `json:"errors"`
	Meta   *Meta                `json:"meta,omitempty"`
}

// ResponseError_Errors defines model for ResponseError.Errors.
type ResponseError_Errors struct {
	union json.RawMessage
}

// UpdateIndex Descreve o índice de atualização das reservas.
type UpdateIndex string

// ConsentId defines model for consentId.
type ConsentId = string

// PageNumber defines model for pageNumber.
type PageNumber = int32

// PageSize defines model for pageSize.
type PageSize = int32

// PlanId defines model for planId.
type PlanId = string

// CapitalizationTitlePlansV1Params defines parameters for CapitalizationTitlePlansV1.
type CapitalizationTitlePlansV1Params struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// CapitalizationTitleEventsV1Params defines parameters for CapitalizationTitleEventsV1.
type CapitalizationTitleEventsV1Params struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// CapitalizationTitleSettlementsV1Params defines parameters for CapitalizationTitleSettlementsV1.
type CapitalizationTitleSettlementsV1Params struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// ResourcesV2Params defines parameters for ResourcesV2.
type ResourcesV2Params struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// CreateConsentV2JSONRequestBody defines body for CreateConsentV2 for application/json ContentType.
type CreateConsentV2JSONRequestBody = CreateConsentRequestV2

// CreateEndorsementV1JSONRequestBody defines body for CreateEndorsementV1 for application/json ContentType.
type CreateEndorsementV1JSONRequestBody = CreateEndorsementRequestV1

// AsError returns the union data inside the ResponseError_Errors as a Error
func (t ResponseError_Errors) AsError() (Error, error) {
	var body Error
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromError overwrites any union data inside the ResponseError_Errors as the provided Error
func (t *ResponseError_Errors) FromError(v Error) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeError performs a merge with any union data inside the ResponseError_Errors, using the provided Error
func (t *ResponseError_Errors) MergeError(v Error) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrors returns the union data inside the ResponseError_Errors as a Errors
func (t ResponseError_Errors) AsErrors() (Errors, error) {
	var body Errors
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrors overwrites any union data inside the ResponseError_Errors as the provided Errors
func (t *ResponseError_Errors) FromErrors(v Errors) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrors performs a merge with any union data inside the ResponseError_Errors, using the provided Errors
func (t *ResponseError_Errors) MergeErrors(v Errors) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponseError_Errors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseError_Errors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /consents/v2/consents)
	CreateConsentV2(w http.ResponseWriter, r *http.Request)

	// (DELETE /consents/v2/consents/{consentId})
	DeleteConsentV2(w http.ResponseWriter, r *http.Request, consentId ConsentId)

	// (GET /consents/v2/consents/{consentId})
	ConsentV2(w http.ResponseWriter, r *http.Request, consentId ConsentId)

	// (GET /customers/v1/personal/complimentary-information)
	PersonalComplimentaryInfoV1(w http.ResponseWriter, r *http.Request)

	// (GET /customers/v1/personal/identifications)
	PersonalIdentificationsV1(w http.ResponseWriter, r *http.Request)

	// (GET /customers/v1/personal/qualifications)
	PersonalQualificationsV1(w http.ResponseWriter, r *http.Request)
	// Envia os dados inseridos manualmente para a solicitação de endosso
	// (POST /endorsement/v1/request/{consentId})
	CreateEndorsementV1(w http.ResponseWriter, r *http.Request, consentId ConsentId)
	// Obtem a lista de identificação de InsuranceCapitalizationTitle
	// (GET /insurance-capitalization-title/v1/insurance-capitalization-title/plans)
	CapitalizationTitlePlansV1(w http.ResponseWriter, r *http.Request, params CapitalizationTitlePlansV1Params)
	// Obtém os dados de eventos do plano identificado por {planId}
	// (GET /insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/events)
	CapitalizationTitleEventsV1(w http.ResponseWriter, r *http.Request, planId PlanId, params CapitalizationTitleEventsV1Params)
	// Obtém as informações gerais do plano identificado por {planId}
	// (GET /insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/plan-info)
	CapitalizationTitlePlanInfoV1(w http.ResponseWriter, r *http.Request, planId PlanId)
	// Obtém os dados de liquidações do plano identificado por {planId}
	// (GET /insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/settlements)
	CapitalizationTitleSettlementsV1(w http.ResponseWriter, r *http.Request, planId PlanId, params CapitalizationTitleSettlementsV1Params)
	// Obtém a lista de recursos consentidos pelo cliente.
	// (GET /resources/v2/resources)
	ResourcesV2(w http.ResponseWriter, r *http.Request, params ResourcesV2Params)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateConsentV2 operation middleware
func (siw *ServerInterfaceWrapper) CreateConsentV2(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateConsentV2(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteConsentV2 operation middleware
func (siw *ServerInterfaceWrapper) DeleteConsentV2(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentId ConsentId

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConsentV2(w, r, consentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentV2 operation middleware
func (siw *ServerInterfaceWrapper) ConsentV2(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentId ConsentId

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentV2(w, r, consentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PersonalComplimentaryInfoV1 operation middleware
func (siw *ServerInterfaceWrapper) PersonalComplimentaryInfoV1(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonalComplimentaryInfoV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PersonalIdentificationsV1 operation middleware
func (siw *ServerInterfaceWrapper) PersonalIdentificationsV1(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonalIdentificationsV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PersonalQualificationsV1 operation middleware
func (siw *ServerInterfaceWrapper) PersonalQualificationsV1(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PersonalQualificationsV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateEndorsementV1 operation middleware
func (siw *ServerInterfaceWrapper) CreateEndorsementV1(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentId ConsentId

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEndorsementV1(w, r, consentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CapitalizationTitlePlansV1 operation middleware
func (siw *ServerInterfaceWrapper) CapitalizationTitlePlansV1(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CapitalizationTitlePlansV1Params

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CapitalizationTitlePlansV1(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CapitalizationTitleEventsV1 operation middleware
func (siw *ServerInterfaceWrapper) CapitalizationTitleEventsV1(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId PlanId

	err = runtime.BindStyledParameterWithOptions("simple", "planId", r.PathValue("planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CapitalizationTitleEventsV1Params

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CapitalizationTitleEventsV1(w, r, planId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CapitalizationTitlePlanInfoV1 operation middleware
func (siw *ServerInterfaceWrapper) CapitalizationTitlePlanInfoV1(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId PlanId

	err = runtime.BindStyledParameterWithOptions("simple", "planId", r.PathValue("planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CapitalizationTitlePlanInfoV1(w, r, planId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CapitalizationTitleSettlementsV1 operation middleware
func (siw *ServerInterfaceWrapper) CapitalizationTitleSettlementsV1(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId PlanId

	err = runtime.BindStyledParameterWithOptions("simple", "planId", r.PathValue("planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CapitalizationTitleSettlementsV1Params

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CapitalizationTitleSettlementsV1(w, r, planId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ResourcesV2 operation middleware
func (siw *ServerInterfaceWrapper) ResourcesV2(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ResourcesV2Params

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResourcesV2(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/consents/v2/consents", wrapper.CreateConsentV2)
	m.HandleFunc("DELETE "+options.BaseURL+"/consents/v2/consents/{consentId}", wrapper.DeleteConsentV2)
	m.HandleFunc("GET "+options.BaseURL+"/consents/v2/consents/{consentId}", wrapper.ConsentV2)
	m.HandleFunc("GET "+options.BaseURL+"/customers/v1/personal/complimentary-information", wrapper.PersonalComplimentaryInfoV1)
	m.HandleFunc("GET "+options.BaseURL+"/customers/v1/personal/identifications", wrapper.PersonalIdentificationsV1)
	m.HandleFunc("GET "+options.BaseURL+"/customers/v1/personal/qualifications", wrapper.PersonalQualificationsV1)
	m.HandleFunc("POST "+options.BaseURL+"/endorsement/v1/request/{consentId}", wrapper.CreateEndorsementV1)
	m.HandleFunc("GET "+options.BaseURL+"/insurance-capitalization-title/v1/insurance-capitalization-title/plans", wrapper.CapitalizationTitlePlansV1)
	m.HandleFunc("GET "+options.BaseURL+"/insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/events", wrapper.CapitalizationTitleEventsV1)
	m.HandleFunc("GET "+options.BaseURL+"/insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/plan-info", wrapper.CapitalizationTitlePlanInfoV1)
	m.HandleFunc("GET "+options.BaseURL+"/insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/settlements", wrapper.CapitalizationTitleSettlementsV1)
	m.HandleFunc("GET "+options.BaseURL+"/resources/v2/resources", wrapper.ResourcesV2)

	return m
}

type CreateConsentV2RequestObject struct {
	Body *CreateConsentV2JSONRequestBody
}

type CreateConsentV2ResponseObject interface {
	VisitCreateConsentV2Response(w http.ResponseWriter) error
}

type CreateConsentV2201JSONResponse ConsentResponseV2

func (response CreateConsentV2201JSONResponse) VisitCreateConsentV2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConsentV2RequestObject struct {
	ConsentId ConsentId `json:"consentId"`
}

type DeleteConsentV2ResponseObject interface {
	VisitDeleteConsentV2Response(w http.ResponseWriter) error
}

type DeleteConsentV2204Response struct {
}

func (response DeleteConsentV2204Response) VisitDeleteConsentV2Response(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ConsentV2RequestObject struct {
	ConsentId ConsentId `json:"consentId"`
}

type ConsentV2ResponseObject interface {
	VisitConsentV2Response(w http.ResponseWriter) error
}

type ConsentV2200JSONResponse ConsentResponseV2

func (response ConsentV2200JSONResponse) VisitConsentV2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PersonalComplimentaryInfoV1RequestObject struct {
}

type PersonalComplimentaryInfoV1ResponseObject interface {
	VisitPersonalComplimentaryInfoV1Response(w http.ResponseWriter) error
}

type PersonalComplimentaryInfoV1200JSONResponse PersonalComplimentaryInfoResponseV1

func (response PersonalComplimentaryInfoV1200JSONResponse) VisitPersonalComplimentaryInfoV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PersonalIdentificationsV1RequestObject struct {
}

type PersonalIdentificationsV1ResponseObject interface {
	VisitPersonalIdentificationsV1Response(w http.ResponseWriter) error
}

type PersonalIdentificationsV1200JSONResponse PersonalIdentificationResponseV1

func (response PersonalIdentificationsV1200JSONResponse) VisitPersonalIdentificationsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PersonalQualificationsV1RequestObject struct {
}

type PersonalQualificationsV1ResponseObject interface {
	VisitPersonalQualificationsV1Response(w http.ResponseWriter) error
}

type PersonalQualificationsV1200JSONResponse PersonalQualificationResponseV1

func (response PersonalQualificationsV1200JSONResponse) VisitPersonalQualificationsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateEndorsementV1RequestObject struct {
	ConsentId ConsentId `json:"consentId"`
	Body      *CreateEndorsementV1JSONRequestBody
}

type CreateEndorsementV1ResponseObject interface {
	VisitCreateEndorsementV1Response(w http.ResponseWriter) error
}

type CreateEndorsementV1201JSONResponse EndorsementResponseV1

func (response CreateEndorsementV1201JSONResponse) VisitCreateEndorsementV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CapitalizationTitlePlansV1RequestObject struct {
	Params CapitalizationTitlePlansV1Params
}

type CapitalizationTitlePlansV1ResponseObject interface {
	VisitCapitalizationTitlePlansV1Response(w http.ResponseWriter) error
}

type CapitalizationTitlePlansV1200JSONResponse CapitalizationTitlePlansResponseV1

func (response CapitalizationTitlePlansV1200JSONResponse) VisitCapitalizationTitlePlansV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CapitalizationTitleEventsV1RequestObject struct {
	PlanId PlanId `json:"planId"`
	Params CapitalizationTitleEventsV1Params
}

type CapitalizationTitleEventsV1ResponseObject interface {
	VisitCapitalizationTitleEventsV1Response(w http.ResponseWriter) error
}

type CapitalizationTitleEventsV1200JSONResponse CapitalizationTitleEventsResponseV1

func (response CapitalizationTitleEventsV1200JSONResponse) VisitCapitalizationTitleEventsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CapitalizationTitlePlanInfoV1RequestObject struct {
	PlanId PlanId `json:"planId"`
}

type CapitalizationTitlePlanInfoV1ResponseObject interface {
	VisitCapitalizationTitlePlanInfoV1Response(w http.ResponseWriter) error
}

type CapitalizationTitlePlanInfoV1200JSONResponse CapitalizationTitlePlanInfoResponseV1

func (response CapitalizationTitlePlanInfoV1200JSONResponse) VisitCapitalizationTitlePlanInfoV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CapitalizationTitleSettlementsV1RequestObject struct {
	PlanId PlanId `json:"planId"`
	Params CapitalizationTitleSettlementsV1Params
}

type CapitalizationTitleSettlementsV1ResponseObject interface {
	VisitCapitalizationTitleSettlementsV1Response(w http.ResponseWriter) error
}

type CapitalizationTitleSettlementsV1200JSONResponse CapitalizationTitleSettlementsResponseV1

func (response CapitalizationTitleSettlementsV1200JSONResponse) VisitCapitalizationTitleSettlementsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ResourcesV2RequestObject struct {
	Params ResourcesV2Params
}

type ResourcesV2ResponseObject interface {
	VisitResourcesV2Response(w http.ResponseWriter) error
}

type ResourcesV2200JSONResponse ResourcesResponseV2

func (response ResourcesV2200JSONResponse) VisitResourcesV2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /consents/v2/consents)
	CreateConsentV2(ctx context.Context, request CreateConsentV2RequestObject) (CreateConsentV2ResponseObject, error)

	// (DELETE /consents/v2/consents/{consentId})
	DeleteConsentV2(ctx context.Context, request DeleteConsentV2RequestObject) (DeleteConsentV2ResponseObject, error)

	// (GET /consents/v2/consents/{consentId})
	ConsentV2(ctx context.Context, request ConsentV2RequestObject) (ConsentV2ResponseObject, error)

	// (GET /customers/v1/personal/complimentary-information)
	PersonalComplimentaryInfoV1(ctx context.Context, request PersonalComplimentaryInfoV1RequestObject) (PersonalComplimentaryInfoV1ResponseObject, error)

	// (GET /customers/v1/personal/identifications)
	PersonalIdentificationsV1(ctx context.Context, request PersonalIdentificationsV1RequestObject) (PersonalIdentificationsV1ResponseObject, error)

	// (GET /customers/v1/personal/qualifications)
	PersonalQualificationsV1(ctx context.Context, request PersonalQualificationsV1RequestObject) (PersonalQualificationsV1ResponseObject, error)
	// Envia os dados inseridos manualmente para a solicitação de endosso
	// (POST /endorsement/v1/request/{consentId})
	CreateEndorsementV1(ctx context.Context, request CreateEndorsementV1RequestObject) (CreateEndorsementV1ResponseObject, error)
	// Obtem a lista de identificação de InsuranceCapitalizationTitle
	// (GET /insurance-capitalization-title/v1/insurance-capitalization-title/plans)
	CapitalizationTitlePlansV1(ctx context.Context, request CapitalizationTitlePlansV1RequestObject) (CapitalizationTitlePlansV1ResponseObject, error)
	// Obtém os dados de eventos do plano identificado por {planId}
	// (GET /insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/events)
	CapitalizationTitleEventsV1(ctx context.Context, request CapitalizationTitleEventsV1RequestObject) (CapitalizationTitleEventsV1ResponseObject, error)
	// Obtém as informações gerais do plano identificado por {planId}
	// (GET /insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/plan-info)
	CapitalizationTitlePlanInfoV1(ctx context.Context, request CapitalizationTitlePlanInfoV1RequestObject) (CapitalizationTitlePlanInfoV1ResponseObject, error)
	// Obtém os dados de liquidações do plano identificado por {planId}
	// (GET /insurance-capitalization-title/v1/insurance-capitalization-title/{planId}/settlements)
	CapitalizationTitleSettlementsV1(ctx context.Context, request CapitalizationTitleSettlementsV1RequestObject) (CapitalizationTitleSettlementsV1ResponseObject, error)
	// Obtém a lista de recursos consentidos pelo cliente.
	// (GET /resources/v2/resources)
	ResourcesV2(ctx context.Context, request ResourcesV2RequestObject) (ResourcesV2ResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateConsentV2 operation middleware
func (sh *strictHandler) CreateConsentV2(w http.ResponseWriter, r *http.Request) {
	var request CreateConsentV2RequestObject

	var body CreateConsentV2JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateConsentV2(ctx, request.(CreateConsentV2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateConsentV2")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateConsentV2ResponseObject); ok {
		if err := validResponse.VisitCreateConsentV2Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConsentV2 operation middleware
func (sh *strictHandler) DeleteConsentV2(w http.ResponseWriter, r *http.Request, consentId ConsentId) {
	var request DeleteConsentV2RequestObject

	request.ConsentId = consentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConsentV2(ctx, request.(DeleteConsentV2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConsentV2")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConsentV2ResponseObject); ok {
		if err := validResponse.VisitDeleteConsentV2Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentV2 operation middleware
func (sh *strictHandler) ConsentV2(w http.ResponseWriter, r *http.Request, consentId ConsentId) {
	var request ConsentV2RequestObject

	request.ConsentId = consentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentV2(ctx, request.(ConsentV2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentV2")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentV2ResponseObject); ok {
		if err := validResponse.VisitConsentV2Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PersonalComplimentaryInfoV1 operation middleware
func (sh *strictHandler) PersonalComplimentaryInfoV1(w http.ResponseWriter, r *http.Request) {
	var request PersonalComplimentaryInfoV1RequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonalComplimentaryInfoV1(ctx, request.(PersonalComplimentaryInfoV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonalComplimentaryInfoV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonalComplimentaryInfoV1ResponseObject); ok {
		if err := validResponse.VisitPersonalComplimentaryInfoV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PersonalIdentificationsV1 operation middleware
func (sh *strictHandler) PersonalIdentificationsV1(w http.ResponseWriter, r *http.Request) {
	var request PersonalIdentificationsV1RequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonalIdentificationsV1(ctx, request.(PersonalIdentificationsV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonalIdentificationsV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonalIdentificationsV1ResponseObject); ok {
		if err := validResponse.VisitPersonalIdentificationsV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PersonalQualificationsV1 operation middleware
func (sh *strictHandler) PersonalQualificationsV1(w http.ResponseWriter, r *http.Request) {
	var request PersonalQualificationsV1RequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PersonalQualificationsV1(ctx, request.(PersonalQualificationsV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PersonalQualificationsV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PersonalQualificationsV1ResponseObject); ok {
		if err := validResponse.VisitPersonalQualificationsV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEndorsementV1 operation middleware
func (sh *strictHandler) CreateEndorsementV1(w http.ResponseWriter, r *http.Request, consentId ConsentId) {
	var request CreateEndorsementV1RequestObject

	request.ConsentId = consentId

	var body CreateEndorsementV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEndorsementV1(ctx, request.(CreateEndorsementV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEndorsementV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateEndorsementV1ResponseObject); ok {
		if err := validResponse.VisitCreateEndorsementV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CapitalizationTitlePlansV1 operation middleware
func (sh *strictHandler) CapitalizationTitlePlansV1(w http.ResponseWriter, r *http.Request, params CapitalizationTitlePlansV1Params) {
	var request CapitalizationTitlePlansV1RequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CapitalizationTitlePlansV1(ctx, request.(CapitalizationTitlePlansV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CapitalizationTitlePlansV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CapitalizationTitlePlansV1ResponseObject); ok {
		if err := validResponse.VisitCapitalizationTitlePlansV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CapitalizationTitleEventsV1 operation middleware
func (sh *strictHandler) CapitalizationTitleEventsV1(w http.ResponseWriter, r *http.Request, planId PlanId, params CapitalizationTitleEventsV1Params) {
	var request CapitalizationTitleEventsV1RequestObject

	request.PlanId = planId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CapitalizationTitleEventsV1(ctx, request.(CapitalizationTitleEventsV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CapitalizationTitleEventsV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CapitalizationTitleEventsV1ResponseObject); ok {
		if err := validResponse.VisitCapitalizationTitleEventsV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CapitalizationTitlePlanInfoV1 operation middleware
func (sh *strictHandler) CapitalizationTitlePlanInfoV1(w http.ResponseWriter, r *http.Request, planId PlanId) {
	var request CapitalizationTitlePlanInfoV1RequestObject

	request.PlanId = planId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CapitalizationTitlePlanInfoV1(ctx, request.(CapitalizationTitlePlanInfoV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CapitalizationTitlePlanInfoV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CapitalizationTitlePlanInfoV1ResponseObject); ok {
		if err := validResponse.VisitCapitalizationTitlePlanInfoV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CapitalizationTitleSettlementsV1 operation middleware
func (sh *strictHandler) CapitalizationTitleSettlementsV1(w http.ResponseWriter, r *http.Request, planId PlanId, params CapitalizationTitleSettlementsV1Params) {
	var request CapitalizationTitleSettlementsV1RequestObject

	request.PlanId = planId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CapitalizationTitleSettlementsV1(ctx, request.(CapitalizationTitleSettlementsV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CapitalizationTitleSettlementsV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CapitalizationTitleSettlementsV1ResponseObject); ok {
		if err := validResponse.VisitCapitalizationTitleSettlementsV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ResourcesV2 operation middleware
func (sh *strictHandler) ResourcesV2(w http.ResponseWriter, r *http.Request, params ResourcesV2Params) {
	var request ResourcesV2RequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ResourcesV2(ctx, request.(ResourcesV2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResourcesV2")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ResourcesV2ResponseObject); ok {
		if err := validResponse.VisitResourcesV2Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WMhkwstrKfXW/xsAAP//lzViNRP2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
